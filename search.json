[{"path":"https://r-world-devs.github.io/cohortBuilder/articles/binding-keys.html","id":"classic-approach","dir":"Articles","previous_headings":"","what":"Classic approach","title":"Specifying data relations with Binding Keys","text":"classic approach, may iteratively extract information extend cohort filters, example can define new condition next filtering step: Now librarian_cohort store issues related selected book. final part need filter borrowers based issues. ’ll filtering third step: Resulting third-step data contain desired information:","code":"run(librarian_cohort) selected_isbn <- get_data(librarian_cohort)$books$isbn librarian_cohort %->%    step(     filter(\"discrete\", id = \"isbn\", dataset = \"issues\", variable = \"isbn\", value = selected_isbn)     ) %>%    run(step_id = 2) selected_borrower_id <- get_data(librarian_cohort)$issues$borrower_id librarian_cohort %->%    step(     filter(\"discrete\", id = \"borr_id\", dataset = \"borrowers\", variable = \"id\", value = selected_borrower_id)     ) %>%    run(step_id = 3) get_data(librarian_cohort)$borrowers #> # A tibble: 2 × 6 #>   id     registered address                           name  phone_number program #>   <chr>  <date>     <chr>                             <chr> <chr>        <chr>   #> 1 000009 2007-07-19 9692 E. Fifth Dr. Waterbury, CT … Mari… 669-975-6908 standa… #> 2 000017 2014-04-07 8501 Lawrence Rd. Terre Haute, I… Rand… 895-995-2326 premium"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/binding-keys.html","id":"binding-keys","dir":"Articles","previous_headings":"","what":"Binding Keys","title":"Specifying data relations with Binding Keys","text":"Now ’re going get result using binding-keys. single binding key describes relation specified table, set tables included source. Note. relate tables, can object bindings abstraction valid (.e. relation lists). Let’s define relation books issues first ’ll explain syntax: Shortly understand key : Whenever table books filtered, filter issues table well (inner join isbn tables) make binding keys description easier, let’s name table passed update parameter dependent one, tables defined ... triggering ones. see , define dependent triggering tables using data keys (data_key). first parameter data_key, dataset stores information source object name whereas key vector keys used join. Note. can define one dependent table binding key, number triggering tables (keeping mind defined keys length). Note. Dependent table updated triggering tables changes. Note. triggering table considered changed least active filter attached. Note. dependent table marked changed updated (can trigger bindings even active filters attach ). may change behavior specifying activate = FALSE bind_key. can define full list binding keys solving case. wrap multiple keys together using bind_keys: define binding keys creating source, need : Now: returns desired result within single step.","code":"issue_books_bk <- bind_key(   update = data_key(dataset = \"issues\", key = \"isbn\"),   data_key(dataset = \"books\", key = \"isbn\") ) case_bks <- bind_keys(   bind_key(     update = data_key(dataset = \"issues\", key = \"isbn\"),     data_key(dataset = \"books\", key = \"isbn\")   ),   bind_key(     update = data_key(dataset = \"borrowers\", key = \"id\"),     data_key(dataset = \"issues\", key = \"borrower_id\")   ) ) librarian_source <- set_source(   as.tblist(librarian),   binding_keys = case_bks )  librarian_cohort <- librarian_source %>%    cohort(     step(       filter(         \"discrete\", id = \"title\", dataset = \"books\",          variable = \"title\", value = \"Birdsong\"       ),       filter(         \"date_range\", id = \"issue_date\", dataset = \"issues\",          variable = \"date\", range = c(as.Date(\"2016-01-01\"), as.Date(\"2016-12-31\"))       )     )   ) run(librarian_cohort) get_data(librarian_cohort) #> $books #> # A tibble: 1 × 6 #>   isbn          title    genre                      publisher    author   copies #>   <chr>         <chr>    <chr>                      <chr>        <chr>     <int> #> 1 0-09-177373-3 Birdsong General & Literary Fiction Random House Sebasti…      4 #>  #> $borrowers #> # A tibble: 2 × 6 #>   id     registered address                           name  phone_number program #>   <chr>  <date>     <chr>                             <chr> <chr>        <chr>   #> 1 000009 2007-07-19 9692 E. Fifth Dr. Waterbury, CT … Mari… 669-975-6908 standa… #> 2 000017 2014-04-07 8501 Lawrence Rd. Terre Haute, I… Rand… 895-995-2326 premium #>  #> $issues #> # A tibble: 2 × 4 #>   id     borrower_id isbn          date       #>   <chr>  <chr>       <chr>         <date>     #> 1 000009 000017      0-09-177373-3 2016-11-12 #> 2 000044 000009      0-09-177373-3 2016-11-20 #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian)"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohort-configuration.html","id":"filtering-steps-in-source","dir":"Articles","previous_headings":"","what":"Filtering steps in Source","title":"Variants for Cohort Configuration","text":"filtering steps configured inside Source object, cohort automatically inherits . can achieve configuring filtering steps Source using add_step method: %->% pipe operator: can also configure filtering steps using add_filter methods, passing step_id inside: Note. step_id skipped, filter added last existing step (first one steps exist). even simpler using %->% (put filters last existing step): , create cohort :","code":"librarian_source <- set_source(   as.tblist(librarian) ) %>%    add_step(     step(       filter(         \"discrete\", id = \"author\", dataset = \"books\",          variable = \"author\", value = \"Dan Brown\"       ),       filter(         \"discrete\", id = \"program\", dataset = \"borrowers\",          variable = \"program\", value = \"premium\", keep_na = FALSE       )     )   ) librarian_source <- set_source(   as.tblist(librarian) ) %->%    step(     filter(       \"discrete\", id = \"author\", dataset = \"books\",        variable = \"author\", value = \"Dan Brown\"     ),     filter(       \"discrete\", id = \"program\", dataset = \"borrowers\",        variable = \"program\", value = \"premium\", keep_na = FALSE     )   ) librarian_source <- set_source(   as.tblist(librarian) ) %>%    add_filter(     filter(       \"discrete\", id = \"author\", dataset = \"books\",        variable = \"author\", value = \"Dan Brown\"     ),     step_id = 1   ) %>%    add_filter(     filter(       \"discrete\", id = \"program\", dataset = \"borrowers\",        variable = \"program\", value = \"premium\", keep_na = FALSE     ),     step_id = 1   ) librarian_source <- set_source(   as.tblist(librarian) ) %->%    filter(     \"discrete\", id = \"author\", dataset = \"books\",      variable = \"author\", value = \"Dan Brown\"   ) %->%    filter(     \"discrete\", id = \"program\", dataset = \"borrowers\",      variable = \"program\", value = \"premium\", keep_na = FALSE   ) librarian_cohort <- cohort(librarian_source) sum_up(librarian_cohort) #> >> Step ID: 1 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohort-configuration.html","id":"filtering-steps-in-cohort","dir":"Articles","previous_headings":"","what":"Filtering steps in Cohort","title":"Variants for Cohort Configuration","text":"filtering steps configured Source, can always achieve using Cohort methods. standard way place steps configuration creating Cohort: want define one step, place filters directly: case Cohort already defined, can repeat approach presented adding filtering steps source. Using add_step: Using %->% pipe operator: can also configure filtering steps using add_filter methods, passing step_id inside: Note. step_id skipped, filter added last existing step (first one steps exist). even simpler using %->% (put filters last existing step): usual can verify configuration sum_up:","code":"librarian_source <- set_source(   as.tblist(librarian) )  librarian_cohort <- librarian_source %>%    cohort(     step(       filter(         \"discrete\", id = \"author\", dataset = \"books\",          variable = \"author\", value = \"Dan Brown\"       ),       filter(         \"discrete\", id = \"program\", dataset = \"borrowers\",          variable = \"program\", value = \"premium\", keep_na = FALSE       )     )   ) librarian_cohort <- librarian_source %>%    cohort(     filter(       \"discrete\", id = \"author\", dataset = \"books\",        variable = \"author\", value = \"Dan Brown\"     ),     filter(       \"discrete\", id = \"program\", dataset = \"borrowers\",        variable = \"program\", value = \"premium\", keep_na = FALSE     )   ) librarian_cohort <- librarian_source %>% cohort()  librarian_cohort %>%    add_step(     step(       filter(         \"discrete\", id = \"author\", dataset = \"books\",          variable = \"author\", value = \"Dan Brown\"       ),       filter(         \"discrete\", id = \"program\", dataset = \"borrowers\",          variable = \"program\", value = \"premium\", keep_na = FALSE       )     )   ) librarian_cohort <- librarian_source %>% cohort()  librarian_cohort %->%    step(     filter(       \"discrete\", id = \"author\", dataset = \"books\",        variable = \"author\", value = \"Dan Brown\"     ),     filter(       \"discrete\", id = \"program\", dataset = \"borrowers\",        variable = \"program\", value = \"premium\", keep_na = FALSE     )   ) librarian_cohort <- librarian_source %>% cohort()  librarian_cohort %>%    add_filter(     filter(       \"discrete\", id = \"author\", dataset = \"books\",        variable = \"author\", value = \"Dan Brown\"     )   ) %>%    add_filter(     filter(       \"discrete\", id = \"program\", dataset = \"borrowers\",        variable = \"program\", value = \"premium\", keep_na = FALSE     )   ) librarian_cohort <- librarian_source %>% cohort()  librarian_cohort %->%    filter(     \"discrete\", id = \"author\", dataset = \"books\",      variable = \"author\", value = \"Dan Brown\"   ) %->%    filter(     \"discrete\", id = \"program\", dataset = \"borrowers\",      variable = \"program\", value = \"premium\", keep_na = FALSE   ) sum_up(librarian_cohort) #> >> Step ID: 1 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohortBuilder.html","id":"cohortbuilder-vs--dplyr","dir":"Articles","previous_headings":"","what":"cohortBuilder vs. dplyr","title":"Introduction to cohortBuilder","text":"’re familiar dplyr (data manipulation package) may wondering cohortBuilder created . main goal creating cohortBuilder provide common syntax operating (filtering) data source need. follows idea dplyr database counterpart dbplyr package. order achieve goal, put emphasis possibility write custom extensions terms data source type, operating backend (underneath cohortBuilder uses dplyr operate data frames, may create extension using e.g. data.table). See vignette(\"custom-extensions\"). second goal integration cohortBuilder shiny. GUI cohortBuilder provided shinyCohortBuilder package. extension may easily open Cohort configuration panel locally, include custom dashboard.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohortBuilder.html","id":"data-librarian","dir":"Articles","previous_headings":"","what":"Data: librarian","title":"Introduction to cohortBuilder","text":"present cohortBuilder’s functionality ’ll operating librarian dataset. librarian list four tables, storing sample book library management database. learn check ?librarian.","code":"cohortBuilder::librarian #> $books #> # A tibble: 17 × 6 #>   isbn              title                          genre publisher author copies #>   <chr>             <chr>                          <chr> <chr>     <chr>   <int> #> 1 0-385-50420-9     The Da Vinci Code              Crim… Transwor… Dan B…      7 #> 2 0-7679-0817-1     A Short History of Nearly Eve… Popu… Transwor… Bill …      4 #> 3 978-0-15-602943-8 The Time Traveler's Wife       Gene… Random H… Audre…      2 #> 4 0-224-06252-2     Atonement                      Gene… Random H… Ian M…      8 #> 5 0-676-97376-0     Life of Pi                     Gene… Canongate Yann …     11 #> # … with 12 more rows #>  #> $borrowers #> # A tibble: 20 × 6 #>   id     registered address                           name  phone_number program #>   <chr>  <date>     <chr>                             <chr> <chr>        <chr>   #> 1 000001 2001-06-09 66 N. Evergreen Ave. Norristown,… Mrs.… 626-594-4729 premium #> 2 000002 2002-08-10 8196 Windsor Road Muscatine, IA … Ms. … 919-530-5272 standa… #> 3 000003 2003-02-15 6 Wood Lane Calumet City, IL 604… Inga… 706-669-5694 NA      #> 4 000004 2004-06-14 18 Nut Swamp Road Merrimack, NH … Keys… 746-328-6598 standa… #> 5 000005 2005-01-15 580 Chapel Rd. Delray Beach, FL … Ferd… 127-363-0738 premium #> # … with 15 more rows #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohortBuilder.html","id":"source-object","dir":"Articles","previous_headings":"","what":"Source object","title":"Introduction to cohortBuilder","text":"Every time work cohortBuilder crucial part properly define data source set_source function. Source R6 object storing metadata data origin. metadata allows cohortBuilder distinct methods use performing operations . define new source need provide data (connection). Let’s create now new source storing librarian data. , pass one obligatory parameter dtconn set_source method. dtconn stores data connection responsible informing cohortBuilder data gonna work (extension use, ). want operate R-loaded list tables, provide tblist class object. tblist just named list data frames tblist class. Note. order create ‘tblist’ object use tblist, e.g. tblist(mtcars, iris). Note. order convert list data frames ‘tblist’ just use .tblist. Let’s proceed creating source: learn set_source’s arguments check ?set_source.","code":"str(as.tblist(librarian), max.level = 1) #> List of 4 #>  $ books    : tibble [17 × 6] (S3: tbl_df/tbl/data.frame) #>  $ borrowers: tibble [20 × 6] (S3: tbl_df/tbl/data.frame) #>  $ issues   : tibble [50 × 4] (S3: tbl_df/tbl/data.frame) #>  $ returns  : tibble [30 × 2] (S3: tbl_df/tbl/data.frame) #>  - attr(*, \"class\")= chr \"tblist\" librarian_source <- set_source(   as.tblist(librarian) ) class(librarian_source) #> [1] \"tblist\" \"Source\" \"R6\""},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohortBuilder.html","id":"cohort-object","dir":"Articles","previous_headings":"","what":"Cohort object","title":"Introduction to cohortBuilder","text":"Source object ready, next step create Cohort object. Cohort R6 object, providing methods operating data included Source. Cohort responsible particular : storing definitions filters (filtering steps), running filtering keeping result , computing caching filter data statistics, keeping updating filtering configuration state. standard workflow build Cohort top Source. achieve cohort function: existing Cohort may get underlying data get_data: ’ll present methods next sections.","code":"librarian_cohort <- librarian_source %>%    cohort() class(librarian_cohort) #> [1] \"Cohort\" \"R6\" get_data(librarian_cohort) #> $books #> # A tibble: 17 × 6 #>   isbn              title                          genre publisher author copies #>   <chr>             <chr>                          <chr> <chr>     <chr>   <int> #> 1 0-385-50420-9     The Da Vinci Code              Crim… Transwor… Dan B…      7 #> 2 0-7679-0817-1     A Short History of Nearly Eve… Popu… Transwor… Bill …      4 #> 3 978-0-15-602943-8 The Time Traveler's Wife       Gene… Random H… Audre…      2 #> 4 0-224-06252-2     Atonement                      Gene… Random H… Ian M…      8 #> 5 0-676-97376-0     Life of Pi                     Gene… Canongate Yann …     11 #> # … with 12 more rows #>  #> $borrowers #> # A tibble: 20 × 6 #>   id     registered address                           name  phone_number program #>   <chr>  <date>     <chr>                             <chr> <chr>        <chr>   #> 1 000001 2001-06-09 66 N. Evergreen Ave. Norristown,… Mrs.… 626-594-4729 premium #> 2 000002 2002-08-10 8196 Windsor Road Muscatine, IA … Ms. … 919-530-5272 standa… #> 3 000003 2003-02-15 6 Wood Lane Calumet City, IL 604… Inga… 706-669-5694 NA      #> 4 000004 2004-06-14 18 Nut Swamp Road Merrimack, NH … Keys… 746-328-6598 standa… #> 5 000005 2005-01-15 580 Chapel Rd. Delray Beach, FL … Ferd… 127-363-0738 premium #> # … with 15 more rows #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian)"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohortBuilder.html","id":"configuring-and-running-filters","dir":"Articles","previous_headings":"","what":"Configuring and running filters","title":"Introduction to cohortBuilder","text":"next step cohortBuilder workflow configuration filters. Filters responsible providing necessary logic performing related data filtering. extensive description filters can found vignette(\"custom-filters\"). current version cohortBuilder provides five types build-filters: discrete - return values (column) matching provided set, discrete_text - return values based provided comma separated values, range - return values within provided range, date_range - range version Date type data, multi_discrete - extended version discrete filter working multiple conditions. Let’s define discrete filter subset books table listing books written Dan Brown. , define following parameters calling filter function: type - type filter (one ), dataset - name dataset apply filter , variable - name variable dataset apply filter , value - vector values applied filter. case: order add filter existing Cohort may use add_filter method: Alternatively may use %->% operator calls add_filter underneath: define filter creating Cohort: much options defining filters. learn check vignette(\"cohort-configuration\"). Note. Cohort R6 object, may skip reassignment . example: also work. Note. verify filter configured properly just run: output highlights list configured filters along parameters. can see id attached filter extra parameters keep_na active describe next sections. can realize filter defined step ID equals 1. ’s cohortBuilder allows perform multi-stage filtering. Let’s get back filtering books. Configuring filters adds proper metadata Cohort object, means data filtering performed automatically. allows set proper configuration first, run calculation . want run data filtering, just call run: Let’s check operation worked fine checking resulting data: want run data filtering automatically filter defined can set run_flow = TRUE: using add_filter : configuring filter along creating cohort. Now data filtered, can get data state filtering? get_data ’s easy, just set state = \"pre\":","code":"author_filter <- filter(   \"discrete\",   dataset = \"books\",   variable = \"author\",   value = \"Dan Brown\" ) librarian_cohort <- librarian_cohort %>%   add_filter(author_filter) librarian_cohort <- librarian_cohort %->%   author_filter librarian_cohort <- librarian_source %>%    cohort(     author_filter   ) librarian_cohort %>%   add_filter(author_filter) sum_up(librarian_cohort) #> >> Step ID: 1 #> -> Filter ID: DDTJX1653245686941 #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown #>      keep_na: TRUE #>      description:  #>      active: TRUE run(librarian_cohort) get_data(librarian_cohort) #> $books #> # A tibble: 2 × 6 #>   isbn          title             genre                  publisher author copies #>   <chr>         <chr>             <chr>                  <chr>     <chr>   <int> #> 1 0-385-50420-9 The Da Vinci Code Crime, Thriller & Adv… Transwor… Dan B…      7 #> 2 0-671-02735-2 Angels and Demons Crime, Thriller & Adv… Transwor… Dan B…      4 #>  #> $borrowers #> # A tibble: 20 × 6 #>   id     registered address                           name  phone_number program #>   <chr>  <date>     <chr>                             <chr> <chr>        <chr>   #> 1 000001 2001-06-09 66 N. Evergreen Ave. Norristown,… Mrs.… 626-594-4729 premium #> 2 000002 2002-08-10 8196 Windsor Road Muscatine, IA … Ms. … 919-530-5272 standa… #> 3 000003 2003-02-15 6 Wood Lane Calumet City, IL 604… Inga… 706-669-5694 NA      #> 4 000004 2004-06-14 18 Nut Swamp Road Merrimack, NH … Keys… 746-328-6598 standa… #> 5 000005 2005-01-15 580 Chapel Rd. Delray Beach, FL … Ferd… 127-363-0738 premium #> # … with 15 more rows #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian) librarian_cohort <- librarian_source %>%    cohort() %>%    add_filter(author_filter, run_flow = TRUE) librarian_cohort <- librarian_source %>%    cohort(     author_filter,     run_flow = TRUE   ) get_data(librarian_cohort, state = \"pre\") #> $books #> # A tibble: 17 × 6 #>   isbn              title                          genre publisher author copies #>   <chr>             <chr>                          <chr> <chr>     <chr>   <int> #> 1 0-385-50420-9     The Da Vinci Code              Crim… Transwor… Dan B…      7 #> 2 0-7679-0817-1     A Short History of Nearly Eve… Popu… Transwor… Bill …      4 #> 3 978-0-15-602943-8 The Time Traveler's Wife       Gene… Random H… Audre…      2 #> 4 0-224-06252-2     Atonement                      Gene… Random H… Ian M…      8 #> 5 0-676-97376-0     Life of Pi                     Gene… Canongate Yann …     11 #> # … with 12 more rows #>  #> $borrowers #> # A tibble: 20 × 6 #>   id     registered address                           name  phone_number program #>   <chr>  <date>     <chr>                             <chr> <chr>        <chr>   #> 1 000001 2001-06-09 66 N. Evergreen Ave. Norristown,… Mrs.… 626-594-4729 premium #> 2 000002 2002-08-10 8196 Windsor Road Muscatine, IA … Ms. … 919-530-5272 standa… #> 3 000003 2003-02-15 6 Wood Lane Calumet City, IL 604… Inga… 706-669-5694 NA      #> 4 000004 2004-06-14 18 Nut Swamp Road Merrimack, NH … Keys… 746-328-6598 standa… #> 5 000005 2005-01-15 580 Chapel Rd. Delray Beach, FL … Ferd… 127-363-0738 premium #> # … with 15 more rows #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian)"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohortBuilder.html","id":"multi-stage-filtering","dir":"Articles","previous_headings":"","what":"Multi-stage filtering","title":"Introduction to cohortBuilder","text":"cohortBuilder can define filters groups named ‘steps’ ‘filtering steps’. Filtering steps allow sequentially perform groups filtering operations. order define step, just wrap set filters step function. define three filters: Taking books written Dan Brown. Filtering members (borrowers) “standard” program. Taking books less 5 copies. ’ll include filters 1. 2. first step - filter 3. second one. code job: Let’s note parts occurred : filter defined id parameter. assigns provided id filter makes accessing later much easier. ‘program’ filter set keep_na = FALSE results excluding NA values (parameter available filter type). filtering number copies ’ve used range filter, sub-setting value defined range parameter. Let’s check Cohort configuration:, can see filters correctly assigned step. multiple steps defined, can use get_data extract resulting data step. order precise step want get data , just pass id step_id parameter: Note. step_id provided, method returns last step data. Note. may precise want extract data filtering using state parameter. proceeding step uses result previous one, :","code":"librarian_cohort <- librarian_source %>%    cohort(     step(       filter(         \"discrete\", id = \"author\", dataset = \"books\",          variable = \"author\", value = \"Dan Brown\"       ),       filter(         \"discrete\", id = \"program\", dataset = \"borrowers\",          variable = \"program\", value = \"premium\", keep_na = FALSE       )     ),     step(       filter(         \"range\", id = \"copies\", dataset = \"books\",          variable = \"copies\", range = c(-Inf, 5)       )     )   ) sum_up(librarian_cohort) #> >> Step ID: 1 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE #> >> Step ID: 2 #> -> Filter ID: copies #>    Filter Type: range #>    Filter Parameters: #>      dataset: books #>      variable: copies #>      range: -Inf, 5 #>      keep_na: TRUE #>      description:  #>      active: TRUE run(librarian_cohort) get_data(librarian_cohort, step_id = 1) #> $books #> # A tibble: 2 × 6 #>   isbn          title             genre                  publisher author copies #>   <chr>         <chr>             <chr>                  <chr>     <chr>   <int> #> 1 0-385-50420-9 The Da Vinci Code Crime, Thriller & Adv… Transwor… Dan B…      7 #> 2 0-671-02735-2 Angels and Demons Crime, Thriller & Adv… Transwor… Dan B…      4 #>  #> $borrowers #> # A tibble: 6 × 6 #>   id     registered address                           name  phone_number program #>   <chr>  <date>     <chr>                             <chr> <chr>        <chr>   #> 1 000001 2001-06-09 66 N. Evergreen Ave. Norristown,… Mrs.… 626-594-4729 premium #> 2 000005 2005-01-15 580 Chapel Rd. Delray Beach, FL … Ferd… 127-363-0738 premium #> 3 000008 2006-11-15 9533 Delaware Dr. Peabody, MA 01… Mrs.… 460-779-8714 premium #> 4 000011 2009-03-24 745 E. Sussex Drive Mahwah, NJ 0… Mr. … 378-884-6509 premium #> 5 000013 2011-09-30 534 Iroquois Ave. Watertown, MA … Dr. … 104-832-8013 premium #> # … with 1 more row #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian) get_data(librarian_cohort, step_id = 2) #> $books #> # A tibble: 1 × 6 #>   isbn          title             genre                  publisher author copies #>   <chr>         <chr>             <chr>                  <chr>     <chr>   <int> #> 1 0-671-02735-2 Angels and Demons Crime, Thriller & Adv… Transwor… Dan B…      4 #>  #> $borrowers #> # A tibble: 6 × 6 #>   id     registered address                           name  phone_number program #>   <chr>  <date>     <chr>                             <chr> <chr>        <chr>   #> 1 000001 2001-06-09 66 N. Evergreen Ave. Norristown,… Mrs.… 626-594-4729 premium #> 2 000005 2005-01-15 580 Chapel Rd. Delray Beach, FL … Ferd… 127-363-0738 premium #> 3 000008 2006-11-15 9533 Delaware Dr. Peabody, MA 01… Mrs.… 460-779-8714 premium #> 4 000011 2009-03-24 745 E. Sussex Drive Mahwah, NJ 0… Mr. … 378-884-6509 premium #> 5 000013 2011-09-30 534 Iroquois Ave. Watertown, MA … Dr. … 104-832-8013 premium #> # … with 1 more row #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian) identical(   get_data(librarian_cohort, step_id = 1, state = \"post\"),   get_data(librarian_cohort, step_id = 2, state = \"pre\") ) #> [1] TRUE"},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohortBuilder.html","id":"learning-more-about-the-source-data","dir":"Articles","previous_headings":"Exploring the Cohort object methods","what":"Learning more about the source data","title":"Introduction to cohortBuilder","text":"Cohort object created, may want use methods exploring underlying data. methods : stat, plot_data, attrition can: get filter related data statistics, display filter related data plot, display data changes across filtering steps.","code":"stat(librarian_cohort, step_id = 1, filter_id = \"program\") #> $n_data #> [1] 6 #>  #> $choices #> $choices$premium #> [1] 6 #>  #>  #> $n_missing #> [1] 0 stat(librarian_cohort, step_id = 2, filter_id = \"copies\") #> $n_data #> [1] 1 #>  #> $frequencies #>   level count l_bound u_bound #> 1     1     1       4       4 #>  #> $n_missing #> [1] 0 plot_data(librarian_cohort, step_id = 1, filter_id = \"program\") plot_data(librarian_cohort, step_id = 2, filter_id = \"copies\") attrition(librarian_cohort, dataset = \"books\") attrition(librarian_cohort, dataset = \"borrowers\")"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/cohortBuilder.html","id":"sharing-code-and-reproducibility","dir":"Articles","previous_headings":"Exploring the Cohort object methods","what":"Sharing code and reproducibility","title":"Introduction to cohortBuilder","text":"cohortBuilder package offers methods make sharing workflow easier. code, may get reproducible code written using methods operating specific source (.e. dplyr tblist dbplyr db source): can see , resulting code uses source object, creation can defined separately creating : second option allows restore cohort configuration using state. cohort state list (json) storing information steps filters configuration. may get state get_state method: , empty cohort, use restore apply configuration:","code":"code(librarian_cohort) #> .pre_filtering <- function(source, data_object, step_id) { #>     for (dataset in names(data_object)) { #>         attr(data_object[[dataset]], \"filtered\") <- FALSE #>     } #>     return(data_object) #> } #> source <- list(dtconn = as.tblist(librarian)) #> data_object <- source$dtconn #> # step 1 #> step_id <- \"1\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"books\"]] <- data_object[[\"books\"]] %>% #>     dplyr::filter(author %in% c(\"Dan Brown\", NA)) #> attr(data_object[[\"books\"]], \"filtered\") <- TRUE #> data_object[[\"borrowers\"]] <- data_object[[\"borrowers\"]] %>% #>     dplyr::filter(program %in% \"premium\") #> attr(data_object[[\"borrowers\"]], \"filtered\") <- TRUE #> # step 2 #> step_id <- \"2\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"books\"]] <- data_object[[\"books\"]] %>% #>     dplyr::filter((copies <= 5 & copies >= -Inf) | is.na(copies)) #> attr(data_object[[\"books\"]], \"filtered\") <- TRUE #> data_object librarian_source <- set_source(   as.tblist(librarian),   source_code = quote({     source <- list(attributes = list(datasets = librarian))   }) )  librarian_cohort <- librarian_source %>%    cohort(     step(       filter(         \"discrete\", id = \"author\", dataset = \"books\",          variable = \"author\", value = \"Dan Brown\"       ),       filter(         \"discrete\", id = \"program\", dataset = \"borrowers\",          variable = \"program\", value = \"premium\", keep_na = FALSE       )     ),     step(       filter(         \"range\", id = \"copies\", dataset = \"books\",          variable = \"copies\", range = c(-Inf, 5)       )     ),     run_flow = TRUE   )  code(librarian_cohort) #> .pre_filtering <- function(source, data_object, step_id) { #>     for (dataset in names(data_object)) { #>         attr(data_object[[dataset]], \"filtered\") <- FALSE #>     } #>     return(data_object) #> } #> source <- list(attributes = list(datasets = librarian)) #> data_object <- source$dtconn #> # step 1 #> step_id <- \"1\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"books\"]] <- data_object[[\"books\"]] %>% #>     dplyr::filter(author %in% c(\"Dan Brown\", NA)) #> attr(data_object[[\"books\"]], \"filtered\") <- TRUE #> data_object[[\"borrowers\"]] <- data_object[[\"borrowers\"]] %>% #>     dplyr::filter(program %in% \"premium\") #> attr(data_object[[\"borrowers\"]], \"filtered\") <- TRUE #> # step 2 #> step_id <- \"2\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"books\"]] <- data_object[[\"books\"]] %>% #>     dplyr::filter((copies <= 5 & copies >= -Inf) | is.na(copies)) #> attr(data_object[[\"books\"]], \"filtered\") <- TRUE #> data_object state <- get_state(librarian_cohort, json = TRUE) state #> [{\"step\":\"1\",\"filters\":[{\"type\":\"discrete\",\"id\":\"author\",\"name\":\"author\",\"variable\":\"author\",\"value\":\"Dan Brown\",\"dataset\":\"books\",\"keep_na\":true,\"description\":null,\"active\":true},{\"type\":\"discrete\",\"id\":\"program\",\"name\":\"program\",\"variable\":\"program\",\"value\":\"premium\",\"dataset\":\"borrowers\",\"keep_na\":false,\"description\":null,\"active\":true}]},{\"step\":\"2\",\"filters\":[{\"type\":\"range\",\"id\":\"copies\",\"name\":\"copies\",\"variable\":\"copies\",\"range\":[\"-Inf\",5],\"dataset\":\"books\",\"keep_na\":true,\"description\":null,\"active\":true}]}] librarian_cohort <- librarian_source %>%   cohort()  restore(librarian_cohort, state = state)  sum_up(librarian_cohort) #> >> Step ID: 1 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE #> >> Step ID: 2 #> -> Filter ID: copies #>    Filter Type: range #>    Filter Parameters: #>      dataset: books #>      variable: copies #>      range: -Inf, 5 #>      keep_na: TRUE #>      description:  #>      active: TRUE"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/custom-filters.html","id":"filter-structure","dir":"Articles","previous_headings":"","what":"Filter structure","title":"Implementing custom filters","text":"start let’s make closer look R object filter . filter function S3 method taking type first argument. case discrete filter, proper used method : gathers provided parameters returns function source argument: whenever define filter specific type returns unevaluated function source parameter. can realize, function calls another S3 method cb_filter.discrete, takes account type provided source. approach two layers S3 methods, allowed build various filter types, various source types. example discrete filter tblist source, discrete filter db source, range filter raw source etc. Now, let’s check object stores filter evaluated source: can see, evaluated filter list 10 elements: type - Filter type. id - Filter id. name - Filter name. input_param - Name parameter taking filtering value. filter_data - Function ‘data_object’ parameter defining filtering logic Source data object. get_stats - Function ‘data_object’ ‘name’ parameters defining data statistics calculated. plot_data - Function ‘data_object’ parameter defining filter data plotted. get_params - Function ‘name’ parameter returning filter parameter (parameters name missing). get_data - Function ‘data_object’ returning filter related data. get_defaults - Function ‘data_object’ ‘cache_object’ parameters returning default ‘input_param’ parameter value. : data_object object passed returned filtering step (details, following structure returned init_source S3 method). cache_object result get_stats method previous step.","code":"filter #> function(type, ...) { #>   UseMethod(\"filter\", type) #> } #> <bytecode: 0x555712e496d8> #> <environment: namespace:cohortBuilder> cohortBuilder:::filter.discrete #> function(type, id, name, ..., active = getOption(\"cb_active_filter\", default = TRUE)) { #>   args <- append( #>     environment() %>% as.list() %>% purrr::keep(~ !is.symbol(.x)), #>     list(...) #>   ) #>  #>   .as_constructor( #>     function(source) { #>       do.call( #>         cb_filter.discrete, #>         append(list(source = source), args) #>       ) #>     } #>   ) #> } #> <bytecode: 0x5557133d2c88> #> <environment: namespace:cohortBuilder> spec_filter <- filter(\"discrete\", value = \"setosa\", dataset = \"iris\", variable = \"Species\") spec_filter #> function(source) { #>       do.call( #>         cb_filter.discrete, #>         append(list(source = source), args) #>       ) #>     } #> <bytecode: 0x5557133cbd50> #> <environment: 0x555713642c18> #> attr(,\"class\") #> [1] \"function\"              \"cb_filter_constructor\" cb_filter.discrete #> function(source, ...) { #>   UseMethod(\"cb_filter.discrete\", source) #> } #> <bytecode: 0x555712e38d38> #> <environment: namespace:cohortBuilder> iris_source <- set_source(   tblist(iris = iris) ) str(   spec_filter(iris_source),   give.attr = FALSE ) #> List of 10 #>  $ id          : chr \"PZJPX1653245702998\" #>  $ type        : 'discrete' chr \"discrete\" #>  $ name        : chr \"PZJPX1653245702998\" #>  $ input_param : chr \"value\" #>  $ filter_data :function (data_object)   #>  $ get_stats   :function (data_object, name)   #>  $ plot_data   :function (data_object)   #>  $ get_params  :function (name)   #>  $ get_data    :function (data_object)   #>  $ get_defaults:function (data_object, cache_object)"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/custom-filters.html","id":"logical-filter","dir":"Articles","previous_headings":"","what":"Logical filter","title":"Implementing custom filters","text":"case want create new filter definition, may use new_filter initialize template. ’ll create new filter takes logical value filters logical column accordingly. Let’s name type filter ‘logical’. filter work ‘tblist’ source data (list data frames). , need : Create filter.logical S3 method called type filter ‘logical’. Create generic cb_filter.logical operates based source type. Create cb_filter.logical generic used method (skip method already exists). Create S3 method specific source data type (‘tblist’ case). define list parameters required filter. obligatory parameters : source, type - equals filter type default, id - randomly generated default, .gen_id(), name - used improving readiness various outputs. Can reassigned id, active - parameter configures whether filter used (even defined). define parameters allow filter configuration related data. case need configure: dataset name used - dataset. variable used filtering - variable. Filtering value - value. Regarding value, cohortBuilder assumes value = NA means filtering applied. needs handled writing filtering logic. Extra filter parameters - .... Accessible via get_params method - see . can also add extra parameter keep_na determines whether NA values included . ’s also worth add description parameter, storing helpful information defined filter. Now create source specific S3 method cb_filter.logical. Inside method call def_filter completing parameters based filter configuration. Please note : filter parameter value equals NA, assume filtering done (unless define keep_na = TRUE). defining filter_data add comment blocks affect reproducible code output: configurations (!)keep_na (!)value_na (start|end) - states filtering case . inline code include comments, code include (start|end) designates code lines include reproducible code. way can easily control parts filtering logic reproducible code include. writing custom filters separate package please add keepSource: true description preserve comments compilation. defining get_stats, took care evaluate selected stat (name missing). implementation obligatory, helps improve performance operate large source data. filter_data method doesn’t change structure data_object. filter_data attaches filtered attribute affected dataset. way, whenever filter_data called (filter active), can handle information running bindings. bindings used, step can skipped. Now can use filter building cohort. example ’ll use extended iris table:","code":"filter.logical <- function(type, id, name, ..., active = getOption(\"cb_active_filter\", default = TRUE)) {   # Skip missing parameters passed and attach `...`   args <- append(     environment() %>% as.list() %>% purrr::keep(~ !is.symbol(.x)),     list(...)   )    # Return function of source parameter calling valid S3 method based on source type   function(source) {     do.call(       cb_filter.logical,       append(list(source = source), args)     )   } } cb_filter.logical <- function(source, ...) {   UseMethod(\"cb_filter.logical\", source) } cb_filter.logical.tblist <- function(   source, type = \"logical\", id = .gen_id(), name = id, dataset, variable,    value = NA, keep_na = TRUE, description = NULL, ..., active = TRUE) {   args <- list(...)    def_filter(     type = type,     id = id,     name = name,     input_param = \"value\",     filter_data = function(data_object) {        selected_value <- value # code include       if (keep_na && !identical(selected_value, NA)) {         # keep_na !value_na start         data_object[[dataset]] <- data_object[[dataset]] %>%           dplyr::filter(!!sym(variable) == !!selected_value | is.na(variable))         # keep_na !value_na end       }       if (!keep_na && identical(selected_value, NA)) {         # !keep_na value_na start         data_object[[dataset]] <- data_object[[dataset]] %>%           dplyr::filter(!is.na(!!sym(variable)))         # !keep_na value_na end       }       if (!keep_na && !identical(selected_value, NA)) {         # !keep_na !value_na start         data_object[[dataset]] <- data_object[[dataset]] %>%           dplyr::filter(!!sym(variable) %in% !!selected_value & !is.na(variable))         # !keep_na !value_na end       }       attr(data_object[[dataset]], \"filtered\") <- TRUE # code include       data_object     },     get_stats = function(data_object, name) {       if (missing(name)) {         name <- c(\"n_data\", \"choices\", \"n_missing\")       }       stats <- list(         choices = if (\"choices\" %in% name) data_object[[dataset]][[variable]] %>% na.omit() %>% table() %>% as.list(),         n_data = if (\"n_data\" %in% name)  data_object[[dataset]][[variable]] %>% na.omit() %>% length(),         n_missing = if (\"n_missing\" %in% name) data_object[[dataset]][[variable]] %>% is.na() %>% sum()       )       if (length(name) == 1) {         return(stats[[name]])       } else {         return(stats[name])       }     },     plot_data = function(data_object) {       if (nrow(data_object[[dataset]])) {         data_object[[dataset]][[variable]] %>% table %>% prop.table() %>% barplot()       } else {         barplot(0, ylim = c(0, 0.1), main = \"No data\")       }     },     get_params = function(name) {       params <- list(         dataset = dataset,         variable = variable,         value = value,         description = description,         keep_na = keep_na,         active = active,         ...       )       if (!missing(name)) return(params[[name]])       return(params)     },     get_data = function(data_object) {       data_object[[dataset]][[variable]]     },     get_defaults = function(data_object, cache_object) {       list(value = names(cache_object$choices))     }   ) } iris2 <- dplyr::mutate(iris, is_setosa = Species == \"setosa\") coh <- set_source(tblist(iris = iris2)) %>%   cohort(     filter(\"logical\", dataset = \"iris\", variable = \"is_setosa\", value = TRUE)   ) %>%   run()"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/managing-cohort.html","id":"managing-filters","dir":"Articles","previous_headings":"","what":"Managing filters","title":"Managing Cohort Object","text":"order manage filters configuration may call following methods: update_filter - update filter configuration, add_filter - add new filter selected step, rm_filter - remove filter existing step. Updating filter: Adding new filter: Removing filter: default configuration doesn’t trigger data recalculation need call run method. Calling run trigger steps computations. case ’ve updated second step can optimize workflow skipping previous steps calculation specifying min_step_id parameter: Note. want run data computation directly calling one methods just set run_flow = TRUE within method.","code":"librarian_cohort %>%    update_filter(     step_id = 1, filter_id = \"author\", value = c(\"Dan Brown\", \"Khaled Hosseini\")   )  sum_up(librarian_cohort) #> >> Step ID: 1 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown, Khaled Hosseini #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE #> >> Step ID: 2 #> -> Filter ID: copies #>    Filter Type: range #>    Filter Parameters: #>      dataset: books #>      variable: copies #>      range: -Inf, 5 #>      keep_na: TRUE #>      description:  #>      active: TRUE librarian_cohort %>%    add_filter(     filter(       \"date_range\", id = \"issue_date\", dataset = \"issues\",        variable = \"date\", range = c(as.Date(\"2010-01-01\"), Inf)     ),     step_id = 2   )  sum_up(librarian_cohort) #> >> Step ID: 1 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown, Khaled Hosseini #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE #> >> Step ID: 2 #> -> Filter ID: copies #>    Filter Type: range #>    Filter Parameters: #>      dataset: books #>      variable: copies #>      range: -Inf, 5 #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: issue_date #>    Filter Type: date_range #>    Filter Parameters: #>      dataset: issues #>      variable: date #>      range: 2010-01-01, NA #>      keep_na: TRUE #>      description:  #>      active: TRUE librarian_cohort %>%    rm_filter(step_id = 2, filter_id = \"copies\")  sum_up(librarian_cohort) #> >> Step ID: 1 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown, Khaled Hosseini #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE #> >> Step ID: 2 #> -> Filter ID: issue_date #>    Filter Type: date_range #>    Filter Parameters: #>      dataset: issues #>      variable: date #>      range: 2010-01-01, NA #>      keep_na: TRUE #>      description:  #>      active: TRUE run(librarian_cohort, min_step_id = 2)  get_data(librarian_cohort) #> $books #> # A tibble: 2 × 6 #>   isbn          title             genre                  publisher author copies #>   <chr>         <chr>             <chr>                  <chr>     <chr>   <int> #> 1 0-385-50420-9 The Da Vinci Code Crime, Thriller & Adv… Transwor… Dan B…      7 #> 2 0-671-02735-2 Angels and Demons Crime, Thriller & Adv… Transwor… Dan B…      4 #>  #> $borrowers #> # A tibble: 6 × 6 #>   id     registered address                           name  phone_number program #>   <chr>  <date>     <chr>                             <chr> <chr>        <chr>   #> 1 000001 2001-06-09 66 N. Evergreen Ave. Norristown,… Mrs.… 626-594-4729 premium #> 2 000005 2005-01-15 580 Chapel Rd. Delray Beach, FL … Ferd… 127-363-0738 premium #> 3 000008 2006-11-15 9533 Delaware Dr. Peabody, MA 01… Mrs.… 460-779-8714 premium #> 4 000011 2009-03-24 745 E. Sussex Drive Mahwah, NJ 0… Mr. … 378-884-6509 premium #> 5 000013 2011-09-30 534 Iroquois Ave. Watertown, MA … Dr. … 104-832-8013 premium #> # … with 1 more row #>  #> $issues #> # A tibble: 42 × 4 #>   id     borrower_id isbn          date       #>   <chr>  <chr>       <chr>         <date>     #> 1 000001 000019      0-676-97976-9 2015-03-17 #> 2 000003 000016      0-09-177373-3 2014-09-28 #> 3 000006 000018      0-14-303714-5 2016-07-21 #> 4 000008 000016      0-340-89696-5 2016-04-16 #> 5 000009 000017      0-09-177373-3 2016-11-12 #> # … with 37 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian)"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/managing-cohort.html","id":"managing-steps","dir":"Articles","previous_headings":"","what":"Managing steps","title":"Managing Cohort Object","text":"Similar filter, can operate Cohort manage steps. cohortBuilder offers add_step rm_step methods add new, remove existing step respectively. Note. Removing last step results renaming step ids (always steps numbering starting 1). Note. methods used managing steps filters can also called Source object . See vignette(\"cohort-configuration\").","code":"librarian_cohort %>%    rm_step(step_id = 1)  sum_up(librarian_cohort) #> >> Step ID: 2 #> -> Filter ID: issue_date #>    Filter Type: date_range #>    Filter Parameters: #>      dataset: issues #>      variable: date #>      range: 2010-01-01, NA #>      keep_na: TRUE #>      description:  #>      active: TRUE librarian_cohort %>%    add_step(     step(       filter(         \"discrete\", id = \"author\", dataset = \"books\",          variable = \"author\", value = \"Dan Brown\"       ),       filter(         \"discrete\", id = \"program\", dataset = \"borrowers\",          variable = \"program\", value = \"premium\", keep_na = FALSE       )     )   )  sum_up(librarian_cohort) #> >> Step ID: 2 #> -> Filter ID: issue_date #>    Filter Type: date_range #>    Filter Parameters: #>      dataset: issues #>      variable: date #>      range: 2010-01-01, NA #>      keep_na: TRUE #>      description:  #>      active: TRUE #> >> Step ID: 2 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE"},{"path":"https://r-world-devs.github.io/cohortBuilder/articles/managing-cohort.html","id":"managing-source","dir":"Articles","previous_headings":"","what":"Managing source","title":"Managing Cohort Object","text":"last Cohort configuration component - source, can also managed within Cohort . update_source method can change source defined existing Cohort. update cohort Source source_code parameter defined: Note updating source doesn’t remove Cohort configuration (steps filters). want clear configuration just set keep_steps = FALSE: can also use update_source add Source empty Cohort: update_source method can also useful want update source along steps filters configuration. case, good practice keep configuration directly Source:","code":"code(librarian_cohort) #> .pre_filtering <- function(source, data_object, step_id) { #>     for (dataset in names(data_object)) { #>         attr(data_object[[dataset]], \"filtered\") <- FALSE #>     } #>     return(data_object) #> } #> source <- list(dtconn = as.tblist(librarian)) #> data_object <- source$dtconn #> # step 1 #> step_id <- \"1\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"issues\"]] <- data_object[[\"issues\"]] %>% #>     dplyr::filter((date <= Inf & date >= 14610) | is.na(date)) #> attr(data_object[[\"issues\"]], \"filtered\") <- TRUE #> # step 2 #> step_id <- \"2\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"books\"]] <- data_object[[\"books\"]] %>% #>     dplyr::filter(author %in% c(\"Dan Brown\", NA)) #> attr(data_object[[\"books\"]], \"filtered\") <- TRUE #> data_object[[\"borrowers\"]] <- data_object[[\"borrowers\"]] %>% #>     dplyr::filter(program %in% \"premium\") #> attr(data_object[[\"borrowers\"]], \"filtered\") <- TRUE #> data_object  new_source <- set_source(   as.tblist(librarian),   source_code = quote({     source <- list(attributes = list(datasets = librarian))   }) )  update_source(librarian_cohort, new_source) code(librarian_cohort) #> .pre_filtering <- function(source, data_object, step_id) { #>     for (dataset in names(data_object)) { #>         attr(data_object[[dataset]], \"filtered\") <- FALSE #>     } #>     return(data_object) #> } #> source <- list(attributes = list(datasets = librarian)) #> data_object <- source$dtconn #> # step 1 #> step_id <- \"1\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"issues\"]] <- data_object[[\"issues\"]] %>% #>     dplyr::filter((date <= Inf & date >= 14610) | is.na(date)) #> attr(data_object[[\"issues\"]], \"filtered\") <- TRUE #> # step 2 #> step_id <- \"2\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"books\"]] <- data_object[[\"books\"]] %>% #>     dplyr::filter(author %in% c(\"Dan Brown\", NA)) #> attr(data_object[[\"books\"]], \"filtered\") <- TRUE #> data_object[[\"borrowers\"]] <- data_object[[\"borrowers\"]] %>% #>     dplyr::filter(program %in% \"premium\") #> attr(data_object[[\"borrowers\"]], \"filtered\") <- TRUE #> data_object sum_up(librarian_cohort) #> >> Step ID: 1 #> -> Filter ID: issue_date #>    Filter Type: date_range #>    Filter Parameters: #>      dataset: issues #>      variable: date #>      range: 2010-01-01, NA #>      keep_na: TRUE #>      description:  #>      active: TRUE #> >> Step ID: 2 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE code(librarian_cohort) #> .pre_filtering <- function(source, data_object, step_id) { #>     for (dataset in names(data_object)) { #>         attr(data_object[[dataset]], \"filtered\") <- FALSE #>     } #>     return(data_object) #> } #> source <- list(attributes = list(datasets = librarian)) #> data_object <- source$dtconn #> # step 1 #> step_id <- \"1\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"issues\"]] <- data_object[[\"issues\"]] %>% #>     dplyr::filter((date <= Inf & date >= 14610) | is.na(date)) #> attr(data_object[[\"issues\"]], \"filtered\") <- TRUE #> # step 2 #> step_id <- \"2\" #> data_object <- .pre_filtering(source, data_object, step_id) #> data_object[[\"books\"]] <- data_object[[\"books\"]] %>% #>     dplyr::filter(author %in% c(\"Dan Brown\", NA)) #> attr(data_object[[\"books\"]], \"filtered\") <- TRUE #> data_object[[\"borrowers\"]] <- data_object[[\"borrowers\"]] %>% #>     dplyr::filter(program %in% \"premium\") #> attr(data_object[[\"borrowers\"]], \"filtered\") <- TRUE #> data_object update_source(librarian_cohort, new_source, keep_steps = FALSE) sum_up(librarian_cohort) #> No steps configuration found. empty_cohort <- cohort() update_source(librarian_cohort, new_source) sum_up(empty_cohort) #> No steps configuration found. source_one <- set_source(   as.tblist(librarian) ) %>%    add_step(     step(       filter(         \"discrete\", id = \"author\", dataset = \"books\",          variable = \"author\", value = \"Dan Brown\"       ),       filter(         \"discrete\", id = \"program\", dataset = \"borrowers\",          variable = \"program\", value = \"premium\", keep_na = FALSE       )     )   )  source_two <- set_source(   as.tblist(librarian) ) %>%    add_step(     step(       filter(         \"range\", id = \"copies\", dataset = \"books\",          variable = \"copies\", range = c(-Inf, 5)       )     )   )  my_cohort <- cohort(source_one) sum_up(my_cohort) #> >> Step ID: 1 #> -> Filter ID: author #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: books #>      variable: author #>      value: Dan Brown #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: program #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: borrowers #>      variable: program #>      value: premium #>      keep_na: FALSE #>      description:  #>      active: TRUE  update_source(my_cohort, source_two) sum_up(my_cohort) #> >> Step ID: 1 #> -> Filter ID: copies #>    Filter Type: range #>    Filter Parameters: #>      dataset: books #>      variable: copies #>      range: -Inf, 5 #>      keep_na: TRUE #>      description:  #>      active: TRUE"},{"path":"https://r-world-devs.github.io/cohortBuilder/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Krystian Igras. Maintainer, author. Adam Foryś. Contributor.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Igras K (2022). cohortBuilder: Data Source Agnostic Filtering Tools. https://github.com/r-world-devs/shinyGizmo/,  https://r-world-devs.github.io/cohortBuilder/.","code":"@Manual{,   title = {cohortBuilder: Data Source Agnostic Filtering Tools},   author = {Krystian Igras},   year = {2022},   note = {https://github.com/r-world-devs/shinyGizmo/,  https://r-world-devs.github.io/cohortBuilder/}, }"},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Data Source Agnostic Filtering Tools","text":"cohortBuilder provides common API creating cohorts multiple data sources, local data frame, database schema external data api. two steps: Configuring data source set_source. Initializing cohort cohort. can operate data using common methods, : filter - define run apply filtering rules, step - perform multi-stage filtering, get_data, stat, attrition, plot_data - extract, sum visualize cohort data. cohortBuilder can share cohort easier useful methods: code - get reproducible cohort creation code, get_state - get cohort state (e.g. JSON) can easily restored restore. modify cohort configuration : add_filter, rm_filter, update_filter - manage filters definition add_step, rm_step - manage filtering steps, update_source - manage cohort source.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/index.html","id":"data-sources-and-extensions","dir":"","previous_headings":"","what":"Data sources and extensions","title":"Data Source Agnostic Filtering Tools","text":"goal cohortBuilder provide common API creating data cohorts, also easily extendable working different data sources (interactive dashboards). cohortBuilder allows operate local data frames (list data frames), yet may easily switch database source loading cohortBuilder.db layer. standalone R package, use cohortBuilder perform operations non-interactive R script, shiny layer shinyCohortBuilder package helps easily switch intuitive gui mode. may integrate cohortBuilder custom Shiny application. want learn write custom source extension, please check vignette(\"custom-extensions\").","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Source Agnostic Filtering Tools","text":"","code":"# CRAN version install.packages(\"cohortBuilder\")  # Latest development version remotes::install_github(\"https://github.com/r-world-devs/cohortBuilder\")"},{"path":"https://r-world-devs.github.io/cohortBuilder/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Data Source Agnostic Filtering Tools","text":"","code":"librarian_source <- set_source(   as.tblist(librarian) )  coh <- librarian_source %>%    cohort(     filter(       \"discrete\", id = \"author\", dataset = \"books\",        variable = \"author\", value = \"Dan Brown\"     ),     filter(       \"range\", id = \"copies\", dataset = \"books\",        variable = \"copies\", range = c(5, 10)     ),     filter(       \"date_range\", id = \"registered\", dataset = \"borrowers\",        variable = \"registered\", range = c(as.Date(\"2010-01-01\"), Inf)     )    ) %>%    run()  get_data(coh) #> $books #> # A tibble: 1 × 6 #>   isbn          title             genre                       publisher  #>   <chr>         <chr>             <chr>                       <chr>      #> 1 0-385-50420-9 The Da Vinci Code Crime, Thriller & Adventure Transworld #>   author    copies #>   <chr>      <int> #> 1 Dan Brown      7 #>  #> $borrowers #> # A tibble: 8 × 6 #>   id     registered address                                          #>   <chr>  <date>     <chr>                                            #> 1 000013 2011-09-30 534 Iroquois Ave. Watertown, MA 02472            #> 2 000014 2013-01-12 7968 Victoria Drive Dearborn, MI 48124           #> 3 000015 2013-12-24 9484 Somerset Road Romeoville, IL 60446          #> 4 000016 2014-01-20 48 Prairie Ave. Palos Verdes Peninsula, CA 90274 #> 5 000017 2014-04-07 8501 Lawrence Rd. Terre Haute, IN 47802          #>   name                    phone_number program  #>   <chr>                   <chr>        <chr>    #> 1 Dr. Sharif Kunde        104-832-8013 premium  #> 2 Marlena Reichert PhD    044-876-8419 vip      #> 3 Mr. Brandan Oberbrunner 568-044-7463 vip      #> 4 Lloyd Adams III         001-017-0211 standard #> 5 Randy Ziemann           895-995-2326 premium  #> # … with 3 more rows #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian) coh <- librarian_source %>%    cohort() %->%    step(     filter(       \"discrete\", id = \"author\", dataset = \"books\",        variable = \"author\", value = \"Dan Brown\"     ),     filter(       \"date_range\", id = \"registered\", dataset = \"borrowers\",        variable = \"registered\", range = c(as.Date(\"2010-01-01\"), Inf)     )   ) %->%    step(     filter(       \"range\", id = \"copies\", dataset = \"books\",        variable = \"copies\", range = c(5, 10)     )   ) %>%    run() get_data(coh, step_id = 1) #> $books #> # A tibble: 2 × 6 #>   isbn          title             genre                       publisher  #>   <chr>         <chr>             <chr>                       <chr>      #> 1 0-385-50420-9 The Da Vinci Code Crime, Thriller & Adventure Transworld #> 2 0-671-02735-2 Angels and Demons Crime, Thriller & Adventure Transworld #>   author    copies #>   <chr>      <int> #> 1 Dan Brown      7 #> 2 Dan Brown      4 #>  #> $borrowers #> # A tibble: 8 × 6 #>   id     registered address                                          #>   <chr>  <date>     <chr>                                            #> 1 000013 2011-09-30 534 Iroquois Ave. Watertown, MA 02472            #> 2 000014 2013-01-12 7968 Victoria Drive Dearborn, MI 48124           #> 3 000015 2013-12-24 9484 Somerset Road Romeoville, IL 60446          #> 4 000016 2014-01-20 48 Prairie Ave. Palos Verdes Peninsula, CA 90274 #> 5 000017 2014-04-07 8501 Lawrence Rd. Terre Haute, IN 47802          #>   name                    phone_number program  #>   <chr>                   <chr>        <chr>    #> 1 Dr. Sharif Kunde        104-832-8013 premium  #> 2 Marlena Reichert PhD    044-876-8419 vip      #> 3 Mr. Brandan Oberbrunner 568-044-7463 vip      #> 4 Lloyd Adams III         001-017-0211 standard #> 5 Randy Ziemann           895-995-2326 premium  #> # … with 3 more rows #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian) get_data(coh, step_id = 2) #> $books #> # A tibble: 1 × 6 #>   isbn          title             genre                       publisher  #>   <chr>         <chr>             <chr>                       <chr>      #> 1 0-385-50420-9 The Da Vinci Code Crime, Thriller & Adventure Transworld #>   author    copies #>   <chr>      <int> #> 1 Dan Brown      7 #>  #> $borrowers #> # A tibble: 8 × 6 #>   id     registered address                                          #>   <chr>  <date>     <chr>                                            #> 1 000013 2011-09-30 534 Iroquois Ave. Watertown, MA 02472            #> 2 000014 2013-01-12 7968 Victoria Drive Dearborn, MI 48124           #> 3 000015 2013-12-24 9484 Somerset Road Romeoville, IL 60446          #> 4 000016 2014-01-20 48 Prairie Ave. Palos Verdes Peninsula, CA 90274 #> 5 000017 2014-04-07 8501 Lawrence Rd. Terre Haute, IN 47802          #>   name                    phone_number program  #>   <chr>                   <chr>        <chr>    #> 1 Dr. Sharif Kunde        104-832-8013 premium  #> 2 Marlena Reichert PhD    044-876-8419 vip      #> 3 Mr. Brandan Oberbrunner 568-044-7463 vip      #> 4 Lloyd Adams III         001-017-0211 standard #> 5 Randy Ziemann           895-995-2326 premium  #> # … with 3 more rows #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian) update_filter(   coh, step_id = 1, filter_id = \"author\",   range = c(5, 6) ) run(coh)  get_data(coh, step_id = 2) #> $books #> # A tibble: 1 × 6 #>   isbn          title             genre                       publisher  #>   <chr>         <chr>             <chr>                       <chr>      #> 1 0-385-50420-9 The Da Vinci Code Crime, Thriller & Adventure Transworld #>   author    copies #>   <chr>      <int> #> 1 Dan Brown      7 #>  #> $borrowers #> # A tibble: 8 × 6 #>   id     registered address                                          #>   <chr>  <date>     <chr>                                            #> 1 000013 2011-09-30 534 Iroquois Ave. Watertown, MA 02472            #> 2 000014 2013-01-12 7968 Victoria Drive Dearborn, MI 48124           #> 3 000015 2013-12-24 9484 Somerset Road Romeoville, IL 60446          #> 4 000016 2014-01-20 48 Prairie Ave. Palos Verdes Peninsula, CA 90274 #> 5 000017 2014-04-07 8501 Lawrence Rd. Terre Haute, IN 47802          #>   name                    phone_number program  #>   <chr>                   <chr>        <chr>    #> 1 Dr. Sharif Kunde        104-832-8013 premium  #> 2 Marlena Reichert PhD    044-876-8419 vip      #> 3 Mr. Brandan Oberbrunner 568-044-7463 vip      #> 4 Lloyd Adams III         001-017-0211 standard #> 5 Randy Ziemann           895-995-2326 premium  #> # … with 3 more rows #>  #> $issues #> # A tibble: 50 × 4 #>   id     borrower_id isbn              date       #>   <chr>  <chr>       <chr>             <date>     #> 1 000001 000019      0-676-97976-9     2015-03-17 #> 2 000002 000010      978-0-7528-6053-4 2008-09-13 #> 3 000003 000016      0-09-177373-3     2014-09-28 #> 4 000004 000005      0-224-06252-2     2005-11-14 #> 5 000005 000004      0-340-89696-5     2006-03-19 #> # … with 45 more rows #>  #> $returns #> # A tibble: 30 × 2 #>   id     date       #>   <chr>  <date>     #> 1 000001 2015-04-06 #> 2 000003 2014-10-23 #> 3 000004 2005-12-29 #> 4 000005 2006-03-26 #> 5 000006 2016-08-30 #> # … with 25 more rows #>  #> attr(,\"class\") #> [1] \"tblist\" #> attr(,\"call\") #> as.tblist(librarian) code(coh) #> { #>     .pre_filtering <- function(source, data_object, step_id) { #>         for (dataset in names(data_object)) { #>             attr(data_object[[dataset]], \"filtered\") <- FALSE #>         } #>         return(data_object) #>     } #>     source <- list(dtconn = as.tblist(librarian)) #>     data_object <- source$dtconn #>     \"-- step 1 --\" #>     step_id <- \"1\" #>     data_object <- .pre_filtering(source, data_object, step_id) #>     selected_value <- \"Dan Brown\" #>     selected_value <- c(selected_value, NA) #>     data_object[[\"books\"]] <- data_object[[\"books\"]] %>% dplyr::filter(!!sym(\"author\") %in%  #>         !!selected_value) #>     attr(data_object[[\"books\"]], \"filtered\") <- TRUE #>     selected_value <- c(14610, Inf) #>     data_object[[\"borrowers\"]] <- data_object[[\"borrowers\"]] %>%  #>         dplyr::filter((!!sym(\"registered\") <= !!selected_value[2] &  #>             !!sym(\"registered\") >= !!selected_value[1]) | is.na(!!sym(\"registered\"))) #>     attr(data_object[[\"borrowers\"]], \"filtered\") <- TRUE #>     \"-- step 2 --\" #>     step_id <- \"2\" #>     data_object <- .pre_filtering(source, data_object, step_id) #>     selected_value <- c(5, 10) #>     data_object[[\"books\"]] <- data_object[[\"books\"]] %>% dplyr::filter((!!sym(\"copies\") <=  #>         !!selected_value[2] & !!sym(\"copies\") >= !!selected_value[1]) |  #>         is.na(!!sym(\"copies\"))) #>     attr(data_object[[\"books\"]], \"filtered\") <- TRUE #>     data_object #> } attrition(coh, dataset = \"books\") get_state(coh, json = TRUE) #> [{\"step\":\"1\",\"filters\":[{\"range\":[5,6],\"type\":\"discrete\",\"id\":\"author\",\"name\":\"author\",\"variable\":\"author\",\"value\":\"Dan Brown\",\"dataset\":\"books\",\"keep_na\":true,\"description\":{},\"active\":true},{\"type\":\"date_range\",\"id\":\"registered\",\"name\":\"registered\",\"variable\":\"registered\",\"range\":[\"2010-01-01\",\"NA\"],\"dataset\":\"borrowers\",\"keep_na\":true,\"description\":{},\"active\":true}]},{\"step\":\"2\",\"filters\":[{\"type\":\"range\",\"id\":\"copies\",\"name\":\"copies\",\"variable\":\"copies\",\"range\":[5,10],\"dataset\":\"books\",\"keep_na\":true,\"description\":{},\"active\":true}]}]"},{"path":"https://r-world-devs.github.io/cohortBuilder/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Data Source Agnostic Filtering Tools","text":"Special thanks : Kamil Wais highlighting need package relevance real-world applications. Adam Foryś technical support, numerous suggestions current future implementation package. Paweł Kawski indication initial assumptions package based real-world medical data.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Data Source Agnostic Filtering Tools","text":"case found bugs, feature request general question please file issue package Github. may also contact package author directly via email krystian8207@gmail.com.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing Cohort object. — Cohort","title":"R6 class representing Cohort object. — Cohort","text":"R6 class representing Cohort object. R6 class representing Cohort object.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 class representing Cohort object. — Cohort","text":"Cohort object designed make operations source data possible.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing Cohort object. — Cohort","text":"attributes List Cohort attributes defined creating new Cohort object.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing Cohort object. — Cohort","text":"Cohort$new() Cohort$add_source() Cohort$update_source() Cohort$get_source() Cohort$add_step() Cohort$copy_step() Cohort$remove_step() Cohort$add_filter() Cohort$remove_filter() Cohort$update_filter() Cohort$clear_filter() Cohort$clear_step() Cohort$sum_up_state() Cohort$get_state() Cohort$restore() Cohort$get_data() Cohort$plot_data() Cohort$show_attrition() Cohort$get_stats() Cohort$show_help() Cohort$get_code() Cohort$run_flow() Cohort$run_step() Cohort$bind_data() Cohort$describe_state() Cohort$get_step() Cohort$get_filter() Cohort$update_cache() Cohort$get_cache() Cohort$list_active_filters() Cohort$last_step_id() Cohort$modify() Cohort$clone()","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing Cohort object. — Cohort","text":"Create Cohort object.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$new(   source,   ...,   run_flow = FALSE,   hook = list(pre = get_hook(\"pre_cohort_hook\"), post = get_hook(\"post_cohort_hook\")) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"source Source object created set_source. ... Steps definition (optional). Can also defined sequence filters - filters added first step. run_flow `TRUE`, data flow run operation completed. hook List hooks describing methods /Cohort created. See hooks details.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-add-source-","dir":"Reference","previous_headings":"","what":"Method add_source()","title":"R6 class representing Cohort object. — Cohort","text":"Add Source Cohort object.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$add_source(source)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"source Source object created set_source.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-update-source-","dir":"Reference","previous_headings":"","what":"Method update_source()","title":"R6 class representing Cohort object. — Cohort","text":"Update Source Cohort object.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$update_source(   source,   keep_steps = !has_steps(source),   run_flow = FALSE,   hook = list(pre = get_hook(\"pre_update_source_hook\"), post =     get_hook(\"post_update_source_hook\")) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"source Source object created set_source. keep_steps `TRUE`, steps definition remains unchanged updating source. `FALSE` steps configuration deleted. vector type integer, specified steps remain. run_flow `TRUE`, data flow run operation completed. hook List hooks describing methods /Cohort created. See hooks details.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-get-source-","dir":"Reference","previous_headings":"","what":"Method get_source()","title":"R6 class representing Cohort object. — Cohort","text":"Return Source object attached Cohort.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$get_source()"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-add-step-","dir":"Reference","previous_headings":"","what":"Method add_step()","title":"R6 class representing Cohort object. — Cohort","text":"Add filtering step definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$add_step(   step,   run_flow = FALSE,   hook = list(pre = get_hook(\"pre_add_step_hook\"), post =     get_hook(\"post_add_step_hook\")) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step Step definition created step. run_flow `TRUE`, data flow run operation completed. hook List hooks describing methods /Cohort created. See hooks details.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-copy-step-","dir":"Reference","previous_headings":"","what":"Method copy_step()","title":"R6 class representing Cohort object. — Cohort","text":"Copy selected step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$copy_step(step_id, run_flow = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step copied. missing last step taken. copied step added last one Cohort. run_flow `TRUE`, data flow run operation completed.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-remove-step-","dir":"Reference","previous_headings":"","what":"Method remove_step()","title":"R6 class representing Cohort object. — Cohort","text":"Remove filtering step definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$remove_step(   step_id,   run_flow = FALSE,   hook = list(pre = get_hook(\"pre_rm_step_hook\"), post = get_hook(\"post_rm_step_hook\")) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step remove. run_flow `TRUE`, data flow run operation completed. hook List hooks describing methods /Cohort created. See hooks details.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-add-filter-","dir":"Reference","previous_headings":"","what":"Method add_filter()","title":"R6 class representing Cohort object. — Cohort","text":"Add filter definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$add_filter(filter, step_id, run_flow = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"filter Filter definition created filter. step_id Id step add filter . missing, filter added last step. run_flow `TRUE`, data flow run operation completed.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-remove-filter-","dir":"Reference","previous_headings":"","what":"Method remove_filter()","title":"R6 class representing Cohort object. — Cohort","text":"Remove filter definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$remove_filter(step_id, filter_id, run_flow = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step filter removed. filter_id Id filter removed. run_flow `TRUE`, data flow run operation completed.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-update-filter-","dir":"Reference","previous_headings":"","what":"Method update_filter()","title":"R6 class representing Cohort object. — Cohort","text":"Update filter definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$update_filter(step_id, filter_id, ..., active, run_flow = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step filter defined. filter_id Id filter updated. ... Filter parameters updated. active Mark filter active (`TRUE`) inactive (`FALSE`). run_flow `TRUE`, data flow run operation completed.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-clear-filter-","dir":"Reference","previous_headings":"","what":"Method clear_filter()","title":"R6 class representing Cohort object. — Cohort","text":"Reset filter default values.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$clear_filter(step_id, filter_id, run_flow = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step filter defined. filter_id Id filter cleared. run_flow `TRUE`, data flow run operation completed.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-clear-step-","dir":"Reference","previous_headings":"","what":"Method clear_step()","title":"R6 class representing Cohort object. — Cohort","text":"Reset filters included selected step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$clear_step(step_id, run_flow = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step filters cleared. run_flow `TRUE`, data flow run operation completed.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-sum-up-state-","dir":"Reference","previous_headings":"","what":"Method sum_up_state()","title":"R6 class representing Cohort object. — Cohort","text":"Sum Cohort configuration - Source, steps definition evaluated data.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$sum_up_state()"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-get-state-","dir":"Reference","previous_headings":"","what":"Method get_state()","title":"R6 class representing Cohort object. — Cohort","text":"Get Cohort configuration state.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$get_state(step_id, json = FALSE, extra_fields = NULL)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id provided, selected step state returned. json TRUE, return state JSON format. extra_fields Names extra fields included filter added state. Restore Cohort configuration.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$restore(   state,   modifier = function(prev_state, state) {     state },   run_flow = FALSE,   hook = list(pre = get_hook(\"pre_restore_hook\"), post = get_hook(\"post_restore_hook\")) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"state List JSON string containing steps filters configuration. modifier Function two parameters combining previous provided state. returned state restored. run_flow `TRUE`, data flow run operation completed. hook List hooks describing methods /Cohort created. See hooks details.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-get-data-","dir":"Reference","previous_headings":"","what":"Method get_data()","title":"R6 class representing Cohort object. — Cohort","text":"Get step related data","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$get_data(step_id, state = \"post\", collect = TRUE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step source data. state Return data (\"pre\") (\"post\") step filtering? collect Return raw data source (`FALSE`) object collected (R memory) data (`TRUE`).","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-plot-data-","dir":"Reference","previous_headings":"","what":"Method plot_data()","title":"R6 class representing Cohort object. — Cohort","text":"Plot filter specific data summary.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$plot_data(step_id, filter_id, ..., state = \"post\")"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step filter defined. filter_id Id filter plot returned ... Another parameters passed filter specific method. state Generate plot data (\"pre\") (\"post\") step filtering?","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-show-attrition-","dir":"Reference","previous_headings":"","what":"Method show_attrition()","title":"R6 class representing Cohort object. — Cohort","text":"Show attrition plot.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$show_attrition(..., percent = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"... Source specific parameters required generate attrition. percent attrition changes presented percentage values.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-get-stats-","dir":"Reference","previous_headings":"","what":"Method get_stats()","title":"R6 class representing Cohort object. — Cohort","text":"Get Cohort related statistics.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$get_stats(step_id, filter_id, ..., state = \"post\")"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id `filter_id` specified, `step_id` precises step filter comes . Otherwise data specified step used calculate required statistics. filter_id missing, filter related data statistics returned. ... Specific parameters passed filter related method. state stats calculated data (\"pre\") (\"post\") filtering specified step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-show-help-","dir":"Reference","previous_headings":"","what":"Method show_help()","title":"R6 class representing Cohort object. — Cohort","text":"Show source data filter description","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$show_help(   field,   step_id,   filter_id,   modifier = getOption(\"cb_help_modifier\", default = function(x) x) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"field Name source description field provided `description` argument set_source. missing, `step_id` `filter_id` used return filter description. step_id Id filter step return description . filter_id Id filter return description . modifier function taking description argument. function can used modify argument (convert html, display browser etc.).","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-get-code-","dir":"Reference","previous_headings":"","what":"Method get_code()","title":"R6 class representing Cohort object. — Cohort","text":"Return reproducible data filtering code.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$get_code(step_id, filter_id, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id `step_id` specified `filter_id` missing, reproducible code specified step returned. `filter_id` missing, `step_id` defines step filter taken. filter_id missing, precises filter reproducible code returned. ... parameters passed tidy_source.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-run-flow-","dir":"Reference","previous_headings":"","what":"Method run_flow()","title":"R6 class representing Cohort object. — Cohort","text":"Trigger data calculations sequentially.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$run_flow(   min_step,   hook = list(pre = get_hook(\"pre_run_flow_hook\"), post =     get_hook(\"post_run_flow_hook\")) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"min_step Step id starting calculation started. hook List hooks describing methods /Cohort created. See hooks details.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-run-step-","dir":"Reference","previous_headings":"","what":"Method run_step()","title":"R6 class representing Cohort object. — Cohort","text":"Trigger data calculations selected step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$run_step(   step_id,   hook = list(pre = get_hook(\"pre_run_step_hook\"), post =     get_hook(\"post_run_step_hook\")) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step run data calculation. hook List hooks describing methods /Cohort created. See hooks details.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-bind-data-","dir":"Reference","previous_headings":"","what":"Method bind_data()","title":"R6 class representing Cohort object. — Cohort","text":"Run data binding selected step.   See binding-keys.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$bind_data(step_id)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step bind data.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-describe-state-","dir":"Reference","previous_headings":"","what":"Method describe_state()","title":"R6 class representing Cohort object. — Cohort","text":"Print defined steps configuration.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$describe_state()"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-get-step-","dir":"Reference","previous_headings":"","what":"Method get_step()","title":"R6 class representing Cohort object. — Cohort","text":"Get selected step configuration.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$get_step(step_id)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step returned.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-get-filter-","dir":"Reference","previous_headings":"","what":"Method get_filter()","title":"R6 class representing Cohort object. — Cohort","text":"Get selected filter configuration.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$get_filter(step_id, filter_id, method = function(x) x)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step filter defined. filter_id filter returned. method Custom function taking filters list argument.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-update-cache-","dir":"Reference","previous_headings":"","what":"Method update_cache()","title":"R6 class representing Cohort object. — Cohort","text":"Update filter step cache. Caching saving step filter attached data statistics number data rows, filter choices frequencies.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$update_cache(step_id, filter_id, state = \"post\")"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step caching applied. `filter_id` missing, parameter describes id step filter found. filter_id Id filter caching applied. state caching done data (\"pre\") (\"post\") filtering specified step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-get-cache-","dir":"Reference","previous_headings":"","what":"Method get_cache()","title":"R6 class representing Cohort object. — Cohort","text":"Return step filter specific cache.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$get_cache(step_id, filter_id, state = \"post\")"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step cached data returned `filter_id` missing, parameter describes id step filter found. filter_id Id filter cache data returned. state cache returned data (\"pre\") (\"post\") filtering specified step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-list-active-filters-","dir":"Reference","previous_headings":"","what":"Method list_active_filters()","title":"R6 class representing Cohort object. — Cohort","text":"List active filters included selected step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$list_active_filters(step_id)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"step_id Id step filters found.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-last-step-id-","dir":"Reference","previous_headings":"","what":"Method last_step_id()","title":"R6 class representing Cohort object. — Cohort","text":"Return id last existing step Cohort.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$last_step_id()"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-modify-","dir":"Reference","previous_headings":"","what":"Method modify()","title":"R6 class representing Cohort object. — Cohort","text":"Helper method enabling run non-standard operation Cohort object.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$modify(modifier)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-27","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"modifier Function two arguments `self` `private`.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing Cohort object. — Cohort","text":"objects class cloneable method.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing Cohort object. — Cohort","text":"","code":"Cohort$clone(deep = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Cohort.html","id":"arguments-28","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing Cohort object. — Cohort","text":"deep Whether make deep clone.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a data source — Source","title":"R6 class representing a data source — Source","text":"R6 class representing data source R6 class representing data source","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 class representing a data source — Source","text":"Source object storing information data source source type, primary keys relations stored data.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a data source — Source","text":"dtconn Data connection object Source based . description Source object description list. attributes Extra source parameters passed source defined. options Extra configuration options. binding_keys Source data relations expressed binding-keys. primary_keys Source data primary keys expressed primary_keys. source_code expression allows recreate basic source structure.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a data source — Source","text":"Source$new() Source$get() Source$get_steps() Source$add_step() Source$rm_step() Source$add_filter() Source$rm_filter() Source$update_filter() Source$clone()","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a data source — Source","text":"Create new `Source` object.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a data source — Source","text":"","code":"Source$new(   dtconn,   ...,   primary_keys = NULL,   binding_keys = NULL,   source_code = NULL,   description = NULL,   options = list(display_binding = TRUE) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a data source — Source","text":"dtconn object defining source data connection. ... Extra Source parameters. Stored within `attributes` field. primary_keys Definition data `primary_keys`, appropriate. See primary_keys. binding_keys Definition relations data, appropriate. See binding-keys. source_code quote object allows recreate basic source structure. Used part reproducible code output, see code. description named list storing source objects description. Can accessed show_help Cohort method. options List options affecting methods output. Currently supported `display_binding` specifying whether reproducible code include bindings definition.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a data source — Source","text":"new `Source` object class `Source` (`dtconn` class appended).","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"R6 class representing a data source — Source","text":"Get selected `Source` object `attribute`.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a data source — Source","text":"","code":"Source$get(param)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a data source — Source","text":"param Name attribute.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"method-get-steps-","dir":"Reference","previous_headings":"","what":"Method get_steps()","title":"R6 class representing a data source — Source","text":"Returns filtering steps definition, defined `Source`.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a data source — Source","text":"","code":"Source$get_steps()"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"method-add-step-","dir":"Reference","previous_headings":"","what":"Method add_step()","title":"R6 class representing a data source — Source","text":"Add filtering step definition.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a data source — Source","text":"","code":"Source$add_step(step)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a data source — Source","text":"step Step definition created step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"method-rm-step-","dir":"Reference","previous_headings":"","what":"Method rm_step()","title":"R6 class representing a data source — Source","text":"Remove filtering step definition.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a data source — Source","text":"","code":"Source$rm_step(step_id)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a data source — Source","text":"step_id Id step removed.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"method-add-filter-","dir":"Reference","previous_headings":"","what":"Method add_filter()","title":"R6 class representing a data source — Source","text":"Add filter definition selected step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a data source — Source","text":"","code":"Source$add_filter(filter, step_id)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a data source — Source","text":"filter Filter definition created filter. step_id Id step include filter . skipped last step used.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"method-rm-filter-","dir":"Reference","previous_headings":"","what":"Method rm_filter()","title":"R6 class representing a data source — Source","text":"Remove filter definition selected step.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a data source — Source","text":"","code":"Source$rm_filter(step_id, filter_id)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a data source — Source","text":"step_id Id step filter defined. filter_id Id filter removed.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"method-update-filter-","dir":"Reference","previous_headings":"","what":"Method update_filter()","title":"R6 class representing a data source — Source","text":"Update filter definition.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a data source — Source","text":"","code":"Source$update_filter(step_id, filter_id, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a data source — Source","text":"step_id Id step filter defined. filter_id Id filter updated. ... Parameters new values.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a data source — Source","text":"objects class cloneable method.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a data source — Source","text":"","code":"Source$clone(deep = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/Source.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a data source — Source","text":"deep Whether make deep clone.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/add_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Add filter definition — add_filter","title":"Add filter definition — add_filter","text":"Add filter definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/add_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add filter definition — add_filter","text":"","code":"add_filter(x, filter, step_id, ...)  # S3 method for Cohort add_filter(x, filter, step_id, run_flow = FALSE, ...)  # S3 method for Source add_filter(x, filter, step_id, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/add_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add filter definition — add_filter","text":"x object add filter . filter Filter definition created filter. step_id Id step add filter . missing, filter added last step. ... parameters passed specific S3 method. run_flow `TRUE`, data flow run filter added.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/add_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add source to Cohort object. — add_source","title":"Add source to Cohort object. — add_source","text":"Cohort object created without source, method allows attach .","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/add_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add source to Cohort object. — add_source","text":"","code":"add_source(x, source)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/add_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add source to Cohort object. — add_source","text":"x Cohort object. source Source object attached.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/add_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Add filtering step definition — add_step","title":"Add filtering step definition — add_step","text":"Add filtering step definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/add_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add filtering step definition — add_step","text":"","code":"add_step(x, step, ...)  # S3 method for Cohort add_step(   x,   step,   run_flow = FALSE,   hook = list(pre = get_hook(\"pre_add_step_hook\"), post =     get_hook(\"post_add_step_hook\")),   ... )  # S3 method for Source add_step(x, step, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/add_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add filtering step definition — add_step","text":"x object add step . step Step definition created step. ... parameters passed specific S3 method. run_flow `TRUE`, data flow run step added. hook List hooks describing methods run /step added. See hooks details.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Show attrition plot. — attrition","title":"Show attrition plot. — attrition","text":"Show attrition plot.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show attrition plot. — attrition","text":"","code":"attrition(x, ..., percent = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show attrition plot. — attrition","text":"x Cohort object. ... Source specific parameters required generate attrition. percent attrition changes presented percentage values.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/binding-keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe data relations with binding keys — binding-keys","title":"Describe data relations with binding keys — binding-keys","text":"source consists multiple datasets, binding keys allow define relations occur . binding keys defined, applying filtering one dataset may result updating (filtering) ones. example two tables Source: `book(book_id, author_id, title)` `authors(author_id, name, surname)` filter `authors` table, way want return books selected authors. binding keys achieve providing `binding_keys` parameter Source : want two-way relation, just define another binding key: result, whenever `books` `authors` filtered, table updated well. order understand binding keys concept need describe following functions: data_key Defines table column used describe relation. bind_key Defines relation occur datasets. bind_keys needed, allows define one relation. - `data_key` - requires provide two parameters: dataset Name dataset existing Source. key Single character string vector storing column names keys, used describe relation. example `data_key('books', 'author_id')`. - `bind_key` - requires provide two obligatory parameters update Data key describing table updated. ... Triggering data keys. One data keys describing dataset(s) one `update` dependent. output `bind_key` function named binding key. `bind_key` offers two extra parameters `post` `activate`. See learn parameters affect final result. - `bind_keys` - takes binding keys parameters function used define `binding_keys` parameter Source. Whenever define single binding keys wrap `bind_keys`. worth mention binding key describes inner-join like relation. means updated table's key intersection key keys remaining tables defined binding key. Another important note binding keys order matters - binding performed sequentially, taking account returned data previous bindings. may achieve flexibility two parameters: activate post Active tables `activate` parameter name table `active` attached least one active filter (step). defined binding key, e.g. key taken account least one triggering table active. example binding key update `books` `authors` filtered (precisely filter attached `authors` active). `activate = TRUE` parameter setup, lets us decide whether `update` table marked active well binding finish. allows build dependency chains table. explain example. defined another table Source `borrowed(book_id, user_id, date)` binding key: consider case table `borrowed` active, `books` . happens binding process: 1. Based first binding key, active `borrowed` triggers one. 2. result `books` modified. happen second binding key. two options: 1. `books` marked active well triggers second key. 2. `books` remain inactive second key triggered. triggered `books` directly filtered (activated). may choose 1 2 `activate = TRUE` (default)  `activate = FALSE` respectively. example (`activate = TRUE` default) authors table also modified second binding key. turn behavior just need : Bind filtered unfiltered data - `post` parameter tart binding key example: assume `authors` table filtered apply filtering `books` table. may want achieve one two results: 1. `authors` filters taken account binding. 2. take unfiltered `authors` apply binding based `books` choices. can achieve 1 2 defining `post = TRUE` (default) `post = FALSE` respectively. following setup: Whenever `books` changed result filtering authors written selected books - extra `authors` filters applied. might situation table already bound another one binding key executed table. case `post = FALSE` case remain - unfiltered table taken. filtering previous binding related table ignored. case `post = TRUE` previously bound table updated.","code":"binding_keys = bind_keys(     bind_key(       update = data_key('books', 'author_id'),       data_key('authors', 'author_id')     )   ) binding_keys = bind_keys(     bind_key(       update = data_key('books', 'author_id'),       data_key('authors', 'author_id')     ),     bind_key(       update = data_key('authors', 'author_id'),       data_key('books', 'author_id')     )   ) bind_key(     update = data_key('books', 'author_id'),     data_key('authors', 'author_id')   ) bind_keys(     bind_key(       update = data_key('books', 'book_id'),       data_key('borrowed', 'book_id')     ),     bind_key(       update = data_key('authors', 'author_id'),       data_key('books', 'author_id')     )   ) bind_keys(     bind_key(       update = data_key('books', 'book_id'),       data_key('borrowed', 'book_id'),       activate = TRUE     ),     bind_key(       update = data_key('authors', 'author_id'),       data_key('books', 'author_id')     )   ) bind_keys(     bind_key(       update = data_key('authors', 'author_id'),       data_key('books', 'author_id')     )   ) bind_keys(     bind_key(       update = data_key('authors', 'author_id'),       data_key('books', 'author_id'),       post = FALSE     )   )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/binding-keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe data relations with binding keys — binding-keys","text":"","code":"bind_keys(...)  bind_key(update, ..., post = TRUE, activate = TRUE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/binding-keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe data relations with binding keys — binding-keys","text":"... case `bind_keys`, binding keys created `bind_key`. case `bind_key`, data keys describing triggering tables. update Data key describing table update. post Update filtered unfiltered table. activate Mark bound table active.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/code.html","id":null,"dir":"Reference","previous_headings":"","what":"Return reproducible data filtering code. — code","title":"Return reproducible data filtering code. — code","text":"Return reproducible data filtering code.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return reproducible data filtering code. — code","text":"","code":"code(x, step_id, filter_id, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return reproducible data filtering code. — code","text":"x Cohort object. step_id `step_id` specified `filter_id` missing, reproducible code specified step returned. `filter_id` missing, `step_id` defines step filter taken. filter_id missing, precises filter reproducible code returned. ... parameters passed tidy_source.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/cohort-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Cohort related methods — cohort-methods","title":"Cohort related methods — cohort-methods","text":"list methods designed getting Cohort-related details. plot_data Plot filter related Cohort data. stat Get Cohort related statistics. code Return reproducible data filtering code. get_data Get step related data. sum_up Sum Cohort state. get_state Save Cohort state. restore Restore Cohort state. attrition Show attrition plot.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/cohortBuilder-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data source cohort — cohortBuilder-package","title":"Create data source cohort — cohortBuilder-package","text":"Create data source cohort","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/create-cohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new 'Cohort' object — create-cohort","title":"Create new 'Cohort' object — create-cohort","text":"Cohort object designed make operations source data possible.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/create-cohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new 'Cohort' object — create-cohort","text":"","code":"cohort(   source,   ...,   run_flow = FALSE,   hook = list(pre = get_hook(\"pre_cohort_hook\"), post = get_hook(\"post_cohort_hook\")) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/create-cohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new 'Cohort' object — create-cohort","text":"source Source object created set_source. ... Steps definition (optional). Can also defined sequence filters - filters added first step. run_flow `TRUE`, data flow run operation completed. hook List hooks describing methods /Cohort created. See hooks details.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/creating-filters.html","id":null,"dir":"Reference","previous_headings":"","what":"Define custom filter. — creating-filters","title":"Define custom filter. — creating-filters","text":"Methods available creating new filters easier.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/creating-filters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define custom filter. — creating-filters","text":"","code":"def_filter(   type,   id = .gen_id(),   name = id,   input_param = NULL,   filter_data,   get_stats,   plot_data,   get_params,   get_data,   get_defaults )  new_filter(   filter_type,   source_type,   input_param = \"value\",   extra_params = \"\",   file )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/creating-filters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define custom filter. — creating-filters","text":"type Filter type. id Filter id. name Filter name. input_param Name parameter taking filtering value. filter_data Function `data_object` parameter defining filtering logic Source data object. get_stats Function `data_object` `name` parameters defining data statistics calculated. plot_data Function `data_object` parameter defining filter data plotted. get_params Function `name` parameter returning filter parameters (names skipped parameters returned). get_data Function `data_object` returning filter related data. get_defaults Function `data_object` `cache_object` parameters returning default `input_param` parameter value. filter_type Type new filter. source_type Type source filter defined. extra_params Vector extra parameters name available filter. file File path filter created.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/creating-filters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define custom filter. — creating-filters","text":"`def_filter` designates list parameters methods required define new type filter. `new_filter` creates new file new filter definition template. See vignettes(\"custom-filters\") learn create custom filter.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/data_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Source dataset key — data_key","title":"Define Source dataset key — data_key","text":"Data keys used define primary_keys binding-keys.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/data_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Source dataset key — data_key","text":"","code":"data_key(dataset, key)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/data_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Source dataset key — data_key","text":"dataset Name dataset included Source. key Character character vector storing column names used table keys.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/description.html","id":null,"dir":"Reference","previous_headings":"","what":"Show source data or filter description — description","title":"Show source data or filter description — description","text":"defined allows check provided description realted source data configured filters.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show source data or filter description — description","text":"","code":"description(   x,   field,   step_id,   filter_id,   modifier = getOption(\"cb_help_modifier\", default = function(x) x) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show source data or filter description — description","text":"x Cohort object. field Name source description field provided `description` argument set_source. missing, `step_id` `filter_id` used return filter description. step_id Id filter step return description . filter_id Id filter return description . modifier function taking description argument. function can used modify argument (convert html, display browser etc.).","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-as_constructor.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach proper class to filter constructor — .as_constructor","title":"Attach proper class to filter constructor — .as_constructor","text":"Attach proper class filter constructor","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-as_constructor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach proper class to filter constructor — .as_constructor","text":"","code":".as_constructor(filter_constructor)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-as_constructor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach proper class to filter constructor — .as_constructor","text":"filter_constructor Function defining filter.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-gen_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random ID — .gen_id","title":"Generate random ID — .gen_id","text":"Generate random ID","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-gen_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random ID — .gen_id","text":"","code":".gen_id()"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-get_item.html","id":null,"dir":"Reference","previous_headings":"","what":"Return list of objects matching provided condition. — .get_item","title":"Return list of objects matching provided condition. — .get_item","text":"Return list objects matching provided condition.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-get_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return list of objects matching provided condition. — .get_item","text":"","code":".get_item(list_obj, attribute, value, operator = `==`)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-get_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return list of objects matching provided condition. — .get_item","text":"list_obj List R objects. attribute Object attribute name. value Object value. operator Logical operator - two-argument function taking `list_obj` attribute value first one, `value` second one.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-get_item.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return list of objects matching provided condition. — .get_item","text":"","code":"my_list <- list(   list(id = 1, name = \"a\"),   list(id = 2, name = \"b\") ) .get_item(my_list, \"id\", 1) #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$name #> [1] \"a\" #>  #>  .get_item(my_list, \"name\", c(\"b\", \"c\"), identical) #> list()"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-get_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get function definition — .get_method","title":"Get function definition — .get_method","text":"Whenever function provided name exists anywhere, one returned (first one multiple found). Return NULL otherwise.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-get_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get function definition — .get_method","text":"","code":".get_method(name)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/dot-get_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get function definition — .get_method","text":"name Name function.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/filter-source-types.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Source types methods — filter-source-types","title":"Filter Source types methods — filter-source-types","text":"Filter Source types methods","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/filter-source-types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Source types methods — filter-source-types","text":"","code":"cb_filter.discrete(source, ...)  cb_filter.discrete_text(source, ...)  cb_filter.range(source, ...)  cb_filter.date_range(source, ...)  cb_filter.multi_discrete(source, ...)  # S3 method for tblist cb_filter.discrete(   source,   type = \"discrete\",   id = .gen_id(),   name = id,   variable,   value = NA,   dataset,   keep_na = TRUE,   ...,   description = NULL,   active = TRUE )  # S3 method for tblist cb_filter.discrete_text(   source,   type = \"discrete_text\",   id = .gen_id(),   name = id,   variable,   value = NA,   dataset,   ...,   description = NULL,   active = TRUE )  # S3 method for tblist cb_filter.range(   source,   type = \"range\",   id = .gen_id(),   name = id,   variable,   range = NA,   dataset,   keep_na = TRUE,   ...,   description = NULL,   active = TRUE )  # S3 method for tblist cb_filter.date_range(   source,   type = \"date_range\",   id = .gen_id(),   name = id,   variable,   range = NA,   dataset,   keep_na = TRUE,   ...,   description = NULL,   active = TRUE )  # S3 method for tblist cb_filter.multi_discrete(   source,   type = \"multi_discrete\",   id = .gen_id(),   name = id,   values,   variables,   dataset,   keep_na = TRUE,   ...,   description = NULL,   active = TRUE )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/filter-source-types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Source types methods — filter-source-types","text":"source Source object. ... Source type specific parameters (extra ones matching specific S3 method arguments). type Character string defining filter type (class value type). id Id filter. name Filter name. variable Dataset variable used filtering. value Value(s) used filtering. dataset Dataset name used filtering. keep_na `TRUE`, NA values included. description Filter description (optional). active FALSE filter skipped Cohort filtering. range Variable range applied filtering. values Named list values applied filtering. names relate ones included `variables` parameter. variables Vector variable names used filtering.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/filter-types.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter types — filter-types","title":"Filter types — filter-types","text":"Filter types","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/filter-types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter types — filter-types","text":"","code":"# S3 method for discrete filter(   type,   id,   name,   ...,   active = getOption(\"cb_active_filter\", default = TRUE) )  # S3 method for discrete_text filter(   type,   id,   name,   ...,   description = NULL,   active = getOption(\"cb_active_filter\", default = TRUE) )  # S3 method for range filter(   type,   id,   name,   ...,   description = NULL,   active = getOption(\"cb_active_filter\", default = TRUE) )  # S3 method for date_range filter(   type,   id,   name,   ...,   description = NULL,   active = getOption(\"cb_active_filter\", default = TRUE) )  # S3 method for multi_discrete filter(   type,   id,   name,   ...,   description = NULL,   active = getOption(\"cb_active_filter\", default = TRUE) )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/filter-types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter types — filter-types","text":"type Character string defining filter type (class value type). id Id filter. name Filter name. ... Source specific parameters passed filter (see filter-source-types). active FALSE filter skipped Cohort filtering.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Cohort filter — filter","title":"Define Cohort filter — filter","text":"Define Cohort filter","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Cohort filter — filter","text":"","code":"filter(type, ...)  # S3 method for character filter(type, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Cohort filter — filter","text":"type Type filter use. ... Filter type-specific parameters (see filter-types), filter source-specific parameters (see filter-source-types).","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get step related data — get_data","title":"Get step related data — get_data","text":"Get step related data","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get step related data — get_data","text":"","code":"get_data(x, step_id, state = \"post\", collect = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get step related data — get_data","text":"x Cohort object. step_id Id step source data. state Return data (\"pre\") (\"post\") step filtering? collect Return raw data source (`FALSE`) object collected (R memory) data (`TRUE`).","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/get_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Cohort configuration state. — get_state","title":"Get Cohort configuration state. — get_state","text":"Get Cohort configuration state.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/get_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Cohort configuration state. — get_state","text":"","code":"get_state(x, step_id, json = FALSE, extra_fields = NULL)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/get_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Cohort configuration state. — get_state","text":"x Cohort object. step_id provided, selected step state returned. json TRUE, return state JSON format. extra_fields Names extra fields included filter added state.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/grapes-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Operator simplifying adding steps or filters to Cohort and Source objects — %->%","title":"Operator simplifying adding steps or filters to Cohort and Source objects — %->%","text":"called filter step object, runs add_filter add_step respectively.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/grapes-greater-than-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operator simplifying adding steps or filters to Cohort and Source objects — %->%","text":"","code":"x %->% object"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/grapes-greater-than-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Operator simplifying adding steps or filters to Cohort and Source objects — %->%","text":"x Source Cohort object. Otherwise works standard pipe operator. object Filter step added `x`.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/hooks.html","id":null,"dir":"Reference","previous_headings":"","what":"Cohort hooks. — hooks","title":"Cohort hooks. — hooks","text":"order make integration `cohortBuilder` package layers/packages easier, hooks system introduced.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/hooks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cohort hooks. — hooks","text":"","code":"add_hook(name, method)  get_hook(name)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/hooks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cohort hooks. — hooks","text":"name Name hook. See Details section. method Function assigned hook.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/hooks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cohort hooks. — hooks","text":"Many Cohort methods allow define `hook` parameter. method, `hook` list containing two values: `pre` `post`, storing functions (hooks) executed method run respectively. `hook` function two obligatory parameters: public Cohort object. private Private environment Cohort object. Cohort method, hook defined, allow pass custom parameters, ones also available hook definition (exclusions, see ). example `Cohort$remove_step` three parameters: step_id run_flow hook implementation, parameters skip `run_flow` `hook`, hook three parameters `public`, `private` `step_id`. two ways defining hooks specific method. first one define method `hook` directly parameter (calling method). second option can achieved usage `add_hook` (`get_hook`) function. default `hook` parameter method constructed : 'Pre' hooks defined 'pre_<method_name>_hook' 'Post' ones 'post_<method_name>_hook'. result calling `add_hook(\"pre_remove_step_hook\", function(public, private, step_id) ...)` result specifying new pre-hook `remove_step` method. may add many hooks want. order hooks execution followed order registering process. want check currently registered hooks specific method, just use:","code":"remove_step = function(step_id, run_flow = FALSE,   hook = list(     pre = get_hook(\"pre_rm_step_hook\"),     post = get_hook(\"post_rm_step_hook\")   ) ) get_hook(\"pre_<method_name>_hook\")"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/librarian.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample of library database — librarian","title":"Sample of library database — librarian","text":"list containing four data frames reflecting library management database.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/librarian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample of library database — librarian","text":"","code":"librarian"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/librarian.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample of library database — librarian","text":"list four data frames: books - books store isbn book ISBN number title book title genre comma separated book genre publisher name book publisher author name book author copies total number book copies store borrowers - registered library members id member unique id registered date member joined library address member address name full member name phone_number member phone number program membership program type (standard, premium vip) issues - borrowed books events id unique event id borrower_id id member borrowed book isbn borrowed book date date borrow event returns - returned books events id event id equal borrow issue id date date return event","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/managing-cohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Managing the Cohort object — managing-cohort","title":"Managing the Cohort object — managing-cohort","text":"list methods designed managing Cohort configuration state. add_source Add source Cohort object. update_source Update Cohort object source. add_step Add step Cohort object. rm_step Remove step Cohort object. add_filter Add filter Cohort step. rm_filter Remove filter Cohort step. update_filter Update filter configuration. run Run data filtering.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/managing-source.html","id":null,"dir":"Reference","previous_headings":"","what":"Managing the Source object — managing-source","title":"Managing the Source object — managing-source","text":"list methods designed managing Source configuration state. add_step Add step Source object. rm_step Remove step Source object. add_filter Add filter Source step. rm_filter Remove filter Source step. update_filter Update filter configuration.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/plot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot filter related Cohort data. — plot_data","title":"Plot filter related Cohort data. — plot_data","text":"specified filter method calls filter-related plot method present data.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/plot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot filter related Cohort data. — plot_data","text":"","code":"plot_data(x, step_id, filter_id, ..., state = \"post\")"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/plot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot filter related Cohort data. — plot_data","text":"x Cohort object. step_id Id step filter defined.. filter_id Filter id. ... Another parameters passed filter plotting method. state Generate plot based data (\"pre\") (\"post\") filtering.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/primary_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Source datasets primary keys — primary_keys","title":"Define Source datasets primary keys — primary_keys","text":"Primary keys can defined `primary_keys` parameter set_source method. Currently, primary keys used show keys information attrition plot (See attrition).","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/primary_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Source datasets primary keys — primary_keys","text":"","code":"primary_keys(...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/primary_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Source datasets primary keys — primary_keys","text":"... Data keys describing tables primary keys.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/primary_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Source datasets primary keys — primary_keys","text":"","code":"primary_keys(   data_key('books', 'book_id'),   data_key('borrowed', c('user_id', 'books_id', 'date')) ) #> [[1]] #> $dataset #> [1] \"books\" #>  #> $key #> [1] \"book_id\" #>  #> attr(,\"class\") #> [1] \"data_key\" #>  #> [[2]] #> $dataset #> [1] \"borrowed\" #>  #> $key #> [1] \"user_id\"  \"books_id\" \"date\"     #>  #> attr(,\"class\") #> [1] \"data_key\" #>  #> attr(,\"class\") #> [1] \"primary_keys\""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/restore.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore Cohort object. — restore","title":"Restore Cohort object. — restore","text":"method allows restore Cohort object provided configuration state.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/restore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore Cohort object. — restore","text":"","code":"restore(   x,   state,   modifier = function(prev_state, state) state,   run_flow = FALSE )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/restore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore Cohort object. — restore","text":"x Cohort object. state List JSON string containing steps filters configuration. See get_state. modifier Function two parameters combining previous provided state. returned state restored. run_flow TRUE, filtering flow applied operation finished.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/rm_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove filter definition — rm_filter","title":"Remove filter definition — rm_filter","text":"Remove filter definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/rm_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove filter definition — rm_filter","text":"","code":"rm_filter(x, step_id, filter_id, ...)  # S3 method for Cohort rm_filter(x, step_id, filter_id, run_flow = FALSE, ...)  # S3 method for Source rm_filter(x, step_id, filter_id, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/rm_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove filter definition — rm_filter","text":"x object filter removed. step_id Id step filter removed. filter_id Id filter removed. ... parameters passed specific S3 method. run_flow `TRUE`, data flow run filter removed.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/rm_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove filtering step definition — rm_step","title":"Remove filtering step definition — rm_step","text":"Remove filtering step definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/rm_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove filtering step definition — rm_step","text":"","code":"rm_step(x, step_id, ...)  # S3 method for Cohort rm_step(   x,   step_id,   run_flow = FALSE,   hook = list(pre = get_hook(\"pre_rm_step_hook\"), post = get_hook(\"post_rm_step_hook\")),   ... )  # S3 method for Source rm_step(x, step_id, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/rm_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove filtering step definition — rm_step","text":"x object step removed. step_id Id step remove. ... parameters passed specific S3 method. run_flow `TRUE`, data flow run step removed. hook List hooks describing methods /Cohort created. See hooks details.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Trigger data calculations. — run","title":"Trigger data calculations. — run","text":"Trigger data calculations.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trigger data calculations. — run","text":"","code":"run(x, min_step_id, step_id)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trigger data calculations. — run","text":"x Cohort object. min_step_id Step id starting calculation started. Used `step_id` missing. step_id Id step run data calculation.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/set_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Cohort source — set_source","title":"Create Cohort source — set_source","text":"Source object storing information data source source type, primary keys relations stored data.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/set_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Cohort source — set_source","text":"","code":"set_source(   dtconn,   ...,   primary_keys = NULL,   binding_keys = NULL,   source_code = NULL,   description = NULL )  # S3 method for tblist set_source(   dtconn,   primary_keys = NULL,   binding_keys = NULL,   source_code = NULL,   description = NULL,   ... )"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/set_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Cohort source — set_source","text":"dtconn object defining source data connection. ... Source type specific parameters. Available `attributes` list resulting object. primary_keys Definition primary keys describing source data (valid). provided, affects output attrition data plot. See primary_keys. binding_keys Definition binding keys describing relations source data (valid). provided, affects post filtering data. See binding-keys. source_code Expression presenting low-level code creating source. provided, used part reproducible code output. description named list storing source objects description. Can accessed description Cohort method.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/set_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Cohort source — set_source","text":"R6 object class provided `type` parameter.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/set_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Cohort source — set_source","text":"","code":"mtcars_source <- set_source(   tblist(mtcars = mtcars),   source_code = quote({     source <- list(dtconn = list(datasets = mtcars))   }) ) mtcars_source$attributes #> list()"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/source-layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Source compatibility methods. — source-layer","title":"Source compatibility methods. — source-layer","text":"List methods allow compatibility different source types. methods defined order make new source layer functioning. See 'Details' section information.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/source-layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source compatibility methods. — source-layer","text":"","code":".init_step(source, ...)  # S3 method for default .init_step(source, ...)  .collect_data(source, data_object)  # S3 method for default .collect_data(source, data_object)  .get_stats(source, data_object)  # S3 method for default .get_stats(source, data_object)  .pre_filtering(source, data_object, step_id)  .post_filtering(source, data_object, step_id)  # S3 method for default .pre_filtering(source, data_object, step_id)  # S3 method for default .post_filtering(source, data_object, step_id)  .get_attrition_label(source, step_id, step_filters, ...)  # S3 method for default .get_attrition_label(source, step_id, step_filters, ...)  .get_attrition_count(source, data_stats, ...)  # S3 method for default .get_attrition_count(source, data_stats, dataset, ...)  .run_binding(source, ...)  # S3 method for default .run_binding(source, binding_key, data_object_pre, data_object_post, ...)  # S3 method for tblist .init_step(source, ...)  # S3 method for tblist .collect_data(source, data_object)  # S3 method for tblist .get_stats(source, data_object)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/source-layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source compatibility methods. — source-layer","text":"source Source object. ... parameters passed specific method. data_object Object allows source data access. `data_object` result `.init_step` method (object structure). step_id Name step visible resulting plot. step_filters List step filters. data_stats Data frame presenting statistics filtering step. dataset Dataset name. binding_key Binding key describing currently processed relation. data_object_pre Object storing unfiltered data current step (previous step result). data_object_post Object storing current data (including active filtering previously done bindings).","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/source-layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Source compatibility methods. — source-layer","text":"package designed make functionality work multiple data sources. Data source can based example list tables, connection database schema API service allows access operate data. order make new source type layer functioning, following list methods defined: .init_source Defines extract data object source.   filtering step assumes operating resulting data object   (named data_object) returns object type structure. .collect_data Defines collect data (R memory) `data_object`. .get_stats Defines `data_object` statistics   calculated . provided stats can extracted using stat. .pre_filtering (optional) Defines operation `data_object`   performed applying filtering step. .post_filtering (optional) Defines operation `data_object`   performed applying filtering step. .run_binding (optional) Defines handle post filtering data binding.   See binding keys binding-keys. .get_attrition_count .get_attrition_label Methods defining   get statistics labels attrition plot. Except methods, may extend existing new source providing custom filtering methods. See creating-filters. order see details implement custom source check `vignette(\"defining-source\")`.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Cohort related statistics. — stat","title":"Get Cohort related statistics. — stat","text":"Display data statistics related specified step filter.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Cohort related statistics. — stat","text":"","code":"stat(x, step_id, filter_id, ..., state = \"post\")"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Cohort related statistics. — stat","text":"x Cohort object. step_id `filter_id` specified, `step_id` precises step filter comes . Otherwise data specified step used calculate required statistics. filter_id missing, filter related data statistics returned. ... Specific parameters passed filter related method. state stats calculated data (\"pre\") (\"post\") filtering specified step.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/step.html","id":null,"dir":"Reference","previous_headings":"","what":"Create filtering step — step","title":"Create filtering step — step","text":"Steps perform multiple stages Source data filtering.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create filtering step — step","text":"","code":"step(...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create filtering step — step","text":"... Filters. See filter.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create filtering step — step","text":"","code":"library(magrittr) iris_step_1 <- step(   filter('discrete', dataset = 'iris', variable = 'Species', value = 'setosa'),   filter('discrete', dataset = 'iris', variable = 'Petal.Length', range = c(1.5, 2)) ) iris_step_2 <- step(   filter('discrete', dataset = 'iris', variable = 'Sepal.Length', range = c(5, 10)) )  # Add step directly to Cohort iris_source <- set_source(tblist(iris = iris)) coh <- iris_source %>%   cohort(     iris_step_1,     iris_step_2   ) %>%   run()  nrow(get_data(coh, step_id = 1)$iris) #> [1] 50 nrow(get_data(coh, step_id = 2)$iris) #> [1] 50  # Add step to Cohort using add_step method coh <- iris_source %>%   cohort() coh <- coh %>%   add_step(iris_step_1) %>%   add_step(iris_step_2) %>%   run()"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/sum_up.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum up Cohort state. — sum_up","title":"Sum up Cohort state. — sum_up","text":"Sum Cohort state.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/sum_up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum up Cohort state. — sum_up","text":"","code":"sum_up(x)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/sum_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum up Cohort state. — sum_up","text":"x Cohort object.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/tblist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create in memory tables connection — tblist","title":"Create in memory tables connection — tblist","text":"Create data connection list loaded data frames. object used `dtconn` argument set_source.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/tblist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create in memory tables connection — tblist","text":"","code":"tblist(..., names)  as.tblist(x, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/tblist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create in memory tables connection — tblist","text":"... additional arguments passed methods. names character vector describing provided tables names. missing names constructed based provided tables objects. x R object.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/tblist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create in memory tables connection — tblist","text":"Object class 'tblist' named list data frames.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/tblist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create in memory tables connection — tblist","text":"","code":"str(tblist(mtcars)) #> List of 1 #>  $ mtcars:'data.frame':\t32 obs. of  11 variables: #>   ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>   ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ... #>   ..$ disp: num [1:32] 160 160 108 258 360 ... #>   ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... #>   ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>   ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... #>   ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ... #>   ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ... #>   ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ... #>   ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ... #>   ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ... #>  - attr(*, \"class\")= chr \"tblist\" str(tblist(mtcars, iris)) #> List of 2 #>  $ mtcars:'data.frame':\t32 obs. of  11 variables: #>   ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>   ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ... #>   ..$ disp: num [1:32] 160 160 108 258 360 ... #>   ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... #>   ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>   ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... #>   ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ... #>   ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ... #>   ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ... #>   ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ... #>   ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ... #>  $ iris  :'data.frame':\t150 obs. of  5 variables: #>   ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>   ..$ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>   ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>   ..$ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>   ..$ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  - attr(*, \"class\")= chr \"tblist\" str(tblist(MT = mtcars, IR = iris)) #> List of 2 #>  $ MT:'data.frame':\t32 obs. of  11 variables: #>   ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>   ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ... #>   ..$ disp: num [1:32] 160 160 108 258 360 ... #>   ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... #>   ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>   ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... #>   ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ... #>   ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ... #>   ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ... #>   ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ... #>   ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ... #>  $ IR:'data.frame':\t150 obs. of  5 variables: #>   ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>   ..$ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>   ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>   ..$ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>   ..$ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  - attr(*, \"class\")= chr \"tblist\" str(tblist(mtcars, iris, names = c(\"MT\", \"IR\"))) #> List of 2 #>  $ MT:'data.frame':\t32 obs. of  11 variables: #>   ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>   ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ... #>   ..$ disp: num [1:32] 160 160 108 258 360 ... #>   ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... #>   ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>   ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... #>   ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ... #>   ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ... #>   ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ... #>   ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ... #>   ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ... #>  $ IR:'data.frame':\t150 obs. of  5 variables: #>   ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>   ..$ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>   ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>   ..$ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>   ..$ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  - attr(*, \"class\")= chr \"tblist\""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/update_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Update filter definition — update_filter","title":"Update filter definition — update_filter","text":"Update filter definition","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/update_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update filter definition — update_filter","text":"","code":"update_filter(x, step_id, filter_id, ...)  # S3 method for Cohort update_filter(x, step_id, filter_id, ..., run_flow = FALSE)  # S3 method for Source update_filter(x, step_id, filter_id, ...)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/update_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update filter definition — update_filter","text":"x object filter updated. step_id Id step filter defined. filter_id Id filter updated. ... Filter parameters updated. run_flow `TRUE`, data flow run filter updated.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/update_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Update source in Cohort object. — update_source","title":"Update source in Cohort object. — update_source","text":"Update source Cohort object.","code":""},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/update_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update source in Cohort object. — update_source","text":"","code":"update_source(x, source, keep_steps = !has_steps(source), run_flow = FALSE)"},{"path":"https://r-world-devs.github.io/cohortBuilder/reference/update_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update source in Cohort object. — update_source","text":"x Cohort object. source Source object updated Cohort. keep_steps `TRUE`, steps definition remain unchanged updating source. `FALSE` steps configuration deleted. vector type integer, specified steps remain. run_flow `TRUE`, data flow run source updated.","code":""},{"path":[]},{"path":"https://r-world-devs.github.io/cohortBuilder/news/index.html","id":"shinycohortbuilder-01","dir":"Changelog","previous_headings":"","what":"shinyCohortBuilder 0.1","title":"shinyCohortBuilder 0.1","text":"First release.","code":""}]
